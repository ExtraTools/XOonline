#!/usr/bin/env node

/**
 * Database Reset Script
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

import { query, run, closeDatabase } from '../server/database/database.js';
import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import winston from 'winston';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.colorize(),
        winston.format.simple()
    ),
    transports: [
        new winston.transports.Console()
    ]
});

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer);
        });
    });
}

async function resetDatabase() {
    logger.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
    logger.warn('‚ö†Ô∏è  –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ—Ñ–∏–ª–∏, —Å–µ—Ä–≤–µ—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!');
    
    const confirmation = await askQuestion('\nü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ');
    
    if (confirmation.toLowerCase() !== 'yes' && confirmation.toLowerCase() !== 'y') {
        logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        rl.close();
        process.exit(0);
    }

    const doubleConfirmation = await askQuestion('\nüî• –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ "DELETE ALL" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ');
    
    if (doubleConfirmation !== 'DELETE ALL') {
        logger.info('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ - –Ω–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ');
        rl.close();
        process.exit(0);
    }

    rl.close();

    try {
        logger.info('üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        const isProduction = process.env.NODE_ENV === 'production';

        if (isProduction) {
            // PostgreSQL - —É–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            logger.info('üêò –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü PostgreSQL...');
            
            const tables = [
                'user_actions',
                'cloud_saves', 
                'installed_mods',
                'saved_servers',
                'launcher_profiles',
                'refresh_tokens',
                'users'
            ];

            for (const table of tables) {
                try {
                    await run(`DROP TABLE IF EXISTS ${table} CASCADE`);
                    logger.info(`   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
                } catch (error) {
                    logger.warn(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${table}: ${error.message}`);
                }
            }

            // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (sequences)
            const sequences = [
                'users_id_seq',
                'refresh_tokens_id_seq',
                'launcher_profiles_id_seq',
                'installed_mods_id_seq',
                'saved_servers_id_seq',
                'cloud_saves_id_seq',
                'user_actions_id_seq'
            ];

            for (const sequence of sequences) {
                try {
                    await run(`DROP SEQUENCE IF EXISTS ${sequence} CASCADE`);
                    logger.info(`   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${sequence}`);
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                }
            }

        } else {
            // SQLite - —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info('üìÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite...');
            
            const dbPath = path.join(__dirname, '../data/dilauncher.db');
            const dbWalPath = path.join(__dirname, '../data/dilauncher.db-wal');
            const dbShmPath = path.join(__dirname, '../data/dilauncher.db-shm');

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try {
                await closeDatabase();
            } catch (error) {
                logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error.message);
            }

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const filesToRemove = [dbPath, dbWalPath, dbShmPath];
            
            for (const filePath of filesToRemove) {
                try {
                    if (await fs.pathExists(filePath)) {
                        await fs.remove(filePath);
                        logger.info(`   ‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${path.basename(filePath)}`);
                    }
                } catch (error) {
                    logger.warn(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
                }
            }

            // –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏
            const logsPath = path.join(__dirname, '../logs');
            try {
                if (await fs.pathExists(logsPath)) {
                    await fs.remove(logsPath);
                    logger.info('   ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤');
                }
            } catch (error) {
                logger.warn('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
            }

            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            await fs.ensureDir(path.join(__dirname, '../data'));
            await fs.ensureDir(path.join(__dirname, '../logs'));
        }

        logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!');
        logger.info('üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run migrate');
        logger.info('üí° –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: npm run seed');

        process.exit(0);

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.includes('--force')) {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)
    logger.warn('üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    resetDatabase();
} else {
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    resetDatabase();
}