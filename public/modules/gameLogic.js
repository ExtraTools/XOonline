// ===== GAME LOGIC MODULE =====

export class GameLogic {
    constructor() {
        this.winPatterns = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8], // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            [0, 3, 6], [1, 4, 7], [2, 5, 8], // –í–µ—Ä—Ç–∏–∫–∞–ª–∏
            [0, 4, 8], [2, 4, 6]             // –î–∏–∞–≥–æ–Ω–∞–ª–∏
        ];
        
        this.init();
        console.log('üéØ GameLogic –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    }

    // ===== –õ–û–ö–ê–õ–¨–ù–ê–Ø –ò–ì–†–ê =====
    startLocalGame() {
        this.resetGameState();
        window.GlassXO.gameState.gameMode = 'local';
        window.GlassXO.gameState.gameActive = true;
        window.GlassXO.gameState.isMyTurn = true;
        
        window.GlassXO.ui.updateGameDisplay();
        window.GlassXO.ui.showScreen('game-screen');
        window.GlassXO.ui.showNotification('üéÆ –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!', 'success');
    }

    // ===== –ò–ì–†–ê –° –ò–ò =====
    startAIGame() {
        if (!window.GlassXO.gameState.difficulty) {
            window.GlassXO.ui.showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏', 'error');
            return;
        }
        
        this.resetGameState();
        window.GlassXO.gameState.gameMode = 'ai';
        window.GlassXO.gameState.gameActive = true;
        window.GlassXO.gameState.isMyTurn = true;
        window.GlassXO.gameState.mySymbol = 'X';
        window.GlassXO.gameState.opponent = `–ò–ò (${this.getDifficultyName(window.GlassXO.gameState.difficulty)})`;
        
        window.GlassXO.ui.updateGameDisplay();
        window.GlassXO.ui.showScreen('game-screen');
        window.GlassXO.ui.showNotification(`ü§ñ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –ò–ò (${this.getDifficultyName(window.GlassXO.gameState.difficulty)}) –Ω–∞—á–∞—Ç–∞!`, 'success');
    }

    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –•–û–î–û–í =====
    handleCellClick(index) {
        const gameState = window.GlassXO.gameState;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
        if (!gameState.gameActive || gameState.board[index] !== null) {
            return;
        }
        
        // –í –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –º–æ–∂–µ–º —Ö–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞
        // –í –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–µ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å
        if (gameState.gameMode === 'online' && !gameState.isMyTurn) {
            window.GlassXO.ui.showNotification('‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!', 'warning');
            return;
        }
        
        this.makeMove(index, gameState.currentPlayer);
    }

    makeMove(index, player) {
        const gameState = window.GlassXO.gameState;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameState.board[index] = player;
        gameState.moveCount++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        window.GlassXO.ui.updateCellDisplay(index, player);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        const result = this.checkGameResult();
        
        if (result) {
            this.endGame(result);
            return;
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
        gameState.currentPlayer = gameState.currentPlayer === 'X' ? 'O' : 'X';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ö–æ–¥–∞
        window.GlassXO.ui.updateTurnIndicator();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
        if (gameState.gameMode === 'local') {
            // –í –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            gameState.isMyTurn = true;
        } else if (gameState.gameMode === 'ai') {
            // –í –∏–≥—Ä–µ —Å –ò–ò –¥–µ–ª–∞–µ–º —Ö–æ–¥ –±–æ—Ç–∞
            gameState.isMyTurn = false;
            setTimeout(() => this.makeAIMove(), 500);
        } else if (gameState.gameMode === 'online') {
            // –í –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            gameState.isMyTurn = false;
            if (window.GlassXO.socket) {
                window.GlassXO.socket.sendMove(index, player);
            }
        }
        
        window.GlassXO.ui.playSound('move');
    }

    // ===== –ò–ò –õ–û–ì–ò–ö–ê =====
    makeAIMove() {
        const gameState = window.GlassXO.gameState;
        
        if (!gameState.gameActive || gameState.currentPlayer !== 'O') {
            return;
        }
        
        let moveIndex;
        
        switch (gameState.difficulty) {
            case 'easy':
                moveIndex = this.getRandomMove();
                break;
            case 'medium':
                moveIndex = this.getMediumAIMove();
                break;
            case 'hard':
                moveIndex = this.getHardAIMove();
                break;
            case 'impossible':
                moveIndex = this.getImpossibleAIMove();
                break;
            default:
                moveIndex = this.getMediumAIMove();
        }
        
        if (moveIndex !== -1) {
            this.makeMove(moveIndex, 'O');
            gameState.isMyTurn = true;
        }
    }

    getRandomMove() {
        const availableMoves = window.GlassXO.gameState.board
            .map((cell, index) => cell === null ? index : null)
            .filter(index => index !== null);
        
        if (availableMoves.length === 0) return -1;
        
        return availableMoves[Math.floor(Math.random() * availableMoves.length)];
    }

    getMediumAIMove() {
        // 70% –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, 30% —Å–ª—É—á–∞–π–Ω–æ
        if (Math.random() < 0.7) {
            return this.getImpossibleAIMove();
        } else {
            return this.getRandomMove();
        }
    }

    getHardAIMove() {
        // 90% –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, 10% —Å–ª—É—á–∞–π–Ω–æ
        if (Math.random() < 0.9) {
            return this.getImpossibleAIMove();
        } else {
            return this.getRandomMove();
        }
    }

    getImpossibleAIMove() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–∫—Å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã
        let bestScore = -Infinity;
        let bestMove = -1;
        const board = [...window.GlassXO.gameState.board];
        
        for (let i = 0; i < 9; i++) {
            if (board[i] === null) {
                board[i] = 'O';
                let score = this.minimax(board, 0, false);
                board[i] = null;
                
                if (score > bestScore) {
                    bestScore = score;
                    bestMove = i;
                }
            }
        }
        
        return bestMove;
    }

    minimax(board, depth, isMaximizing) {
        const result = this.checkGameResultForBoard(board);
        
        if (result && result.winner === 'O') return 1;
        if (result && result.winner === 'X') return -1;
        if (result && result.winner === 'draw') return 0;
        
        if (isMaximizing) {
            let bestScore = -Infinity;
            for (let i = 0; i < 9; i++) {
                if (board[i] === null) {
                    board[i] = 'O';
                    let score = this.minimax(board, depth + 1, false);
                    board[i] = null;
                    bestScore = Math.max(score, bestScore);
                }
            }
            return bestScore;
        } else {
            let bestScore = Infinity;
            for (let i = 0; i < 9; i++) {
                if (board[i] === null) {
                    board[i] = 'X';
                    let score = this.minimax(board, depth + 1, true);
                    board[i] = null;
                    bestScore = Math.min(score, bestScore);
                }
            }
            return bestScore;
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê =====
    checkGameResult() {
        return this.checkGameResultForBoard(window.GlassXO.gameState.board);
    }

    checkGameResultForBoard(board) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for (let pattern of this.winPatterns) {
            const [a, b, c] = pattern;
            if (board[a] && board[a] === board[b] && board[a] === board[c]) {
                return { winner: board[a], pattern };
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é
        if (board.every(cell => cell !== null)) {
            return { winner: 'draw', pattern: null };
        }
        
        return null;
    }

    // ===== –û–ö–û–ù–ß–ê–ù–ò–ï –ò–ì–†–´ =====
    endGame(result) {
        const gameState = window.GlassXO.gameState;
        gameState.gameActive = false;
        
        let title, message, isWin = false;
        
        if (result.winner === 'draw') {
            title = 'ü§ù –ù–∏—á—å—è!';
            message = '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
        } else if (gameState.gameMode === 'local') {
            title = `üéâ –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ ${result.winner}!`;
            message = `–ò–≥—Ä–æ–∫ ${result.winner} –≤—ã–∏–≥—Ä–∞–ª —ç—Ç—É –ø–∞—Ä—Ç–∏—é!`;
            isWin = true;
        } else if (gameState.gameMode === 'ai') {
            if (result.winner === 'X') {
                title = 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!';
                message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ–±—ã–≥—Ä–∞–ª–∏ –ò–ò —É—Ä–æ–≤–Ω—è "${this.getDifficultyName(gameState.difficulty)}"!`;
                isWin = true;
            } else {
                title = 'üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
                message = `–ò–ò —É—Ä–æ–≤–Ω—è "${this.getDifficultyName(gameState.difficulty)}" –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`;
            }
        } else if (gameState.gameMode === 'online') {
            if (result.winner === gameState.mySymbol) {
                title = 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!';
                message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ–±—ã–≥—Ä–∞–ª–∏ ${gameState.opponent}!`;
                isWin = true;
            } else {
                title = 'üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
                message = `${gameState.opponent} –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ. –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!`;
            }
        }
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        if (result.pattern) {
            result.pattern.forEach(index => {
                document.querySelector(`[data-index="${index}"]`)?.classList.add('winning');
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updatePlayerStats(isWin, result.winner === 'draw');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        document.getElementById('result-title').textContent = title;
        document.getElementById('result-message').textContent = message;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
        const gameDuration = Math.floor((Date.now() - gameState.gameStartTime) / 1000);
        document.getElementById('game-duration').textContent = window.GlassXO.utils.formatTime(gameDuration);
        document.getElementById('moves-made').textContent = gameState.moveCount;
        document.getElementById('result-stats').style.display = 'block';
        
        window.GlassXO.ui.openModal('game-result-modal');
        
        window.GlassXO.ui.playSound(isWin ? 'win' : (result.winner === 'draw' ? 'draw' : 'lose'));
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ô =====
    restartGame() {
        if (window.GlassXO.gameState.gameMode === 'local') {
            this.startLocalGame();
        } else if (window.GlassXO.gameState.gameMode === 'ai') {
            this.startAIGame();
        } else if (window.GlassXO.gameState.gameMode === 'online' && window.GlassXO.socket) {
            window.GlassXO.socket.requestRestart();
        }
    }

    surrenderGame() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è?')) {
            const gameState = window.GlassXO.gameState;
            
            if (gameState.gameMode === 'online' && window.GlassXO.socket) {
                window.GlassXO.socket.surrender();
            } else {
                const opponent = gameState.currentPlayer === 'X' ? 'O' : 'X';
                this.endGame({ winner: opponent, pattern: null });
            }
        }
    }

    playAgain() {
        const gameState = window.GlassXO.gameState;
        
        if (gameState.gameMode === 'local') {
            this.startLocalGame();
        } else if (gameState.gameMode === 'ai') {
            window.GlassXO.ui.showScreen('ai-difficulty-screen');
        } else if (gameState.gameMode === 'online') {
            window.GlassXO.ui.showScreen('online-lobby-screen');
        }
    }

    // ===== –£–¢–ò–õ–ò–¢–´ =====
    resetGameState() {
        window.GlassXO.gameState.board = Array(9).fill(null);
        window.GlassXO.gameState.currentPlayer = 'X';
        window.GlassXO.gameState.gameActive = false;
        window.GlassXO.gameState.isMyTurn = false;
        window.GlassXO.gameState.mySymbol = null;
        window.GlassXO.gameState.opponent = null;
        window.GlassXO.gameState.gameStartTime = Date.now();
        window.GlassXO.gameState.moveCount = 0;
    }

    getDifficultyName(difficulty) {
        const names = {
            'easy': '–õ—ë–≥–∫–∏–π',
            'medium': '–°—Ä–µ–¥–Ω–∏–π', 
            'hard': '–°–ª–æ–∂–Ω—ã–π',
            'impossible': '–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π'
        };
        return names[difficulty] || '–°—Ä–µ–¥–Ω–∏–π';
    }

    updatePlayerStats(isWin, isDraw) {
        const player = window.GlassXO.player;
        
        player.gamesPlayed++;
        
        if (isWin) {
            player.winStreak++;
        } else if (!isDraw) {
            player.winStreak = 0;
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
        const wins = Math.round((player.winRate / 100) * (player.gamesPlayed - 1));
        const newWins = wins + (isWin ? 1 : 0);
        player.winRate = Math.round((newWins / player.gamesPlayed) * 100);
        
        window.GlassXO.ui.updatePlayerProfile();
        window.GlassXO.saveGameData();
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ù–õ–ê–ô–ù –ò–ì–†–´ =====
    handleOnlineMove(data) {
        window.GlassXO.gameState.board[data.index] = data.player;
        window.GlassXO.gameState.moveCount++;
        window.GlassXO.ui.updateCellDisplay(data.index, data.player);
        
        const result = this.checkGameResult();
        if (result) {
            this.endGame(result);
            return;
        }
        
        window.GlassXO.gameState.currentPlayer = window.GlassXO.gameState.currentPlayer === 'X' ? 'O' : 'X';
        window.GlassXO.gameState.isMyTurn = window.GlassXO.gameState.currentPlayer === window.GlassXO.gameState.mySymbol;
        
        window.GlassXO.ui.updateTurnIndicator();
        window.GlassXO.ui.playSound('move');
    }

    handleOnlineGameEnd(data) {
        window.GlassXO.gameState.gameActive = false;
        
        const result = {
            winner: data.winner,
            pattern: data.winningPattern
        };
        
        this.endGame(result);
    }

    handleOpponentLeft() {
        window.GlassXO.gameState.gameActive = false;
        window.GlassXO.ui.showNotification('üòû –í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É', 'warning');
        
        setTimeout(() => {
            window.GlassXO.ui.showScreen('main-menu');
        }, 3000);
    }
} 