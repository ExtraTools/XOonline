// ===== SOCKET MANAGER MODULE =====

export class SocketManager {
    constructor() {
        this.socket = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.searchTimer = null;
        
        this.init();
        console.log('üîå SocketManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    init() {
        this.initializeConnection();
    }

    // ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï =====
    initializeConnection() {
        try {
            this.socket = io();
            this.setupEventListeners();
            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Socket.IO:', error);
            this.handleConnectionError();
        }
    }

    setupEventListeners() {
        if (!this.socket) return;

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
        this.socket.on('connect', () => this.handleConnect());
        this.socket.on('disconnect', () => this.handleDisconnect());
        this.socket.on('connect_error', (error) => this.handleConnectionError(error));
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        this.socket.on('player-connected', (data) => this.handlePlayerConnected(data));

        // üéÆ –ù–û–í–´–ï –ò–ì–†–û–í–´–ï –°–û–ë–´–¢–ò–Ø
        this.socket.on('gameStart', (data) => this.handleGameStart(data));
        this.socket.on('game-started', (data) => this.handleGameStart(data)); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        this.socket.on('move-made', (data) => this.handleMoveMade(data));
        this.socket.on('move-error', (data) => this.handleMoveError(data));
        this.socket.on('game-finished', (data) => this.handleGameFinished(data));
        this.socket.on('opponent-disconnected', (data) => this.handleOpponentDisconnected(data));
        this.socket.on('searching', (data) => this.handleSearching(data));
        this.socket.on('search-cancelled', (data) => this.handleSearchCancelled(data));

        // üö™ –ù–û–í–´–ï –°–û–ë–´–¢–ò–Ø –ö–û–ú–ù–ê–¢
        this.socket.on('roomCreated', (data) => this.handleRoomCreated(data));
        this.socket.on('room-created', (data) => this.handleRoomCreated(data)); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        this.socket.on('roomJoined', (data) => this.handleRoomJoined(data));
        this.socket.on('room-joined', (data) => this.handleRoomJoined(data)); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        this.socket.on('roomUpdated', (data) => this.handleRoomUpdated(data));
        this.socket.on('room-updated', (data) => this.handleRoomUpdated(data)); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        this.socket.on('roomError', (data) => this.handleRoomError(data));
        this.socket.on('room-error', (data) => this.handleRoomError(data)); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

        // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        this.socket.on('stats-update', (stats) => this.handleOnlineStats(stats));

        // –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.socket.on('onlineStats', (stats) => this.handleOnlineStats(stats));

        // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
        this.socket.on('usersList', (users) => this.handleUsersList(users));

        // –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—è
        this.socket.on('admin_action_received', (data) => this.handleAdminAction(data));

        // üè† –°–ü–ò–°–û–ö –ü–£–ë–õ–ò–ß–ù–´–• –ö–û–ú–ù–ê–¢
        this.socket.on('publicRoomsList', (rooms) => this.handlePublicRooms(rooms));
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====
    handleConnect() {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
        this.isConnected = true;
        this.reconnectAttempts = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const playerData = {
            user: {
                id: window.GlassXO.player.id || null,
                name: window.GlassXO.player.nickname
            },
            guestName: window.GlassXO.player.isGuest ? window.GlassXO.player.nickname : null
        };
        
        this.socket.emit('player-connect', playerData);
        
        window.GlassXO.ui.showNotification('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
    }

    handlePlayerConnected(data) {
        if (data.success && data.player) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const player = data.player;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            window.GlassXO.player = {
                ...window.GlassXO.player,
                id: player.id,
                user_id: player.user_id,
                username: player.username,
                name: player.name,
                nickname: player.name,
                avatar: player.avatar,
                level: player.level || 1,
                stats: player.stats || { gamesPlayed: 0, gamesWon: 0, winRate: 0 },
                isGuest: player.isGuest,
                registration: player.registration,
                ip: player.ip,
                isAdmin: player.isAdmin || false
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            if (window.GlassXO.player.isAdmin && window.GlassXO.adminPanel) {
                window.GlassXO.adminPanel.isAdmin = true;
                const adminBtn = document.getElementById('admin-btn');
                if (adminBtn) {
                    adminBtn.style.display = 'block';
                }
                console.log('üî• –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            window.GlassXO.ui.updatePlayerProfile();
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', window.GlassXO.player);
        }
    }

    handleDisconnect() {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        this.isConnected = false;
        
        window.GlassXO.ui.showNotification('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.attemptReconnect();
    }

    handleConnectionError(error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        this.isConnected = false;
        
        window.GlassXO.ui.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
        this.attemptReconnect();
    }

    attemptReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ò–≥—Ä–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.', 'warning');
            return;
        }

        this.reconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);
        
        setTimeout(() => {
            if (!this.isConnected) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}...`);
                this.socket.connect();
            }
        }, delay);
    }

    // ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ =====
    setNickname(nickname) {
        if (this.socket && this.isConnected) {
            this.socket.emit('setNickname', nickname);
        }
    }

    // ===== –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö =====
    findQuickMatch() {
        if (!this.isConnected) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return;
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è
        window.GlassXO.ui.openModal('waiting-modal');
        document.getElementById('waiting-title').textContent = 'üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã';
        document.getElementById('waiting-message').textContent = '–ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...';
        
        this.socket.emit('findGame');
        this.startMatchmakingTimer();
        
        window.GlassXO.ui.showNotification('üîç –ò—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...', 'info');
    }

    cancelMatchmaking() {
        if (this.socket && this.isConnected) {
            this.socket.emit('cancel-search');
        }
        
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        window.GlassXO.ui.closeModal('waiting-modal');
        window.GlassXO.ui.showNotification('‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω', 'info');
    }

    startMatchmakingTimer() {
        const searchTimeDisplay = document.getElementById('search-time');
        if (!searchTimeDisplay) return;
        
        let searchStartTime = Date.now();
        
        this.searchTimer = setInterval(() => {
            const elapsed = Math.floor((Date.now() - searchStartTime) / 1000);
            searchTimeDisplay.textContent = window.GlassXO.utils.formatTime(elapsed);
        }, 1000);
    }

    // ===== –ö–û–ú–ù–ê–¢–´ =====
    createPrivateRoom() {
        const roomName = document.getElementById('room-name')?.value.trim();
        const roomPassword = document.getElementById('room-password')?.value.trim();
        
        if (!roomName) {
            window.GlassXO.ui.showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã', 'error');
            return;
        }
        
        if (!this.isConnected) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return;
        }
        
        this.socket.emit('createRoom', {
            name: roomName,
            password: roomPassword || null,
            maxPlayers: 2
        });
        
        window.GlassXO.ui.showNotification('üö™ –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É...', 'info');
    }

    joinPrivateRoom() {
        const roomCode = document.getElementById('room-code')?.value.trim();
        
        if (!roomCode) {
            window.GlassXO.ui.showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã', 'error');
            return;
        }
        
        if (!this.isConnected) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return;
        }
        
        this.socket.emit('joinRoom', { code: roomCode });
        window.GlassXO.ui.showNotification('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ...', 'info');
    }

    // ===== –ò–ì–†–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø =====
    sendMove(position, gameId) {
        if (this.socket && this.isConnected) {
            this.socket.emit('make-move', { 
                position: position,
                gameId: gameId || window.GlassXO.gameState.gameId
            });
            console.log(`üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥: –ø–æ–∑–∏—Ü–∏—è ${position}, –∏–≥—Ä–∞ ${gameId}`);
        } else {
            console.log('‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É, —Ö–æ–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }

    requestRestart() {
        if (this.socket && this.isConnected) {
            this.socket.emit('requestRestart');
        }
    }

    surrender() {
        if (this.socket && this.isConnected) {
            this.socket.emit('surrender');
        }
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
    handleGameStart(data) {
        console.log('üéÆ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        window.GlassXO.gameState.gameMode = 'online';
        window.GlassXO.gameState.gameId = data.gameId;
        window.GlassXO.gameState.roomId = data.roomId;
        window.GlassXO.gameState.mySymbol = data.yourSymbol || data.symbol;
        window.GlassXO.gameState.opponent = data.opponent;
        window.GlassXO.gameState.players = data.players || [];
        window.GlassXO.gameState.isMyTurn = data.yourTurn !== undefined ? data.yourTurn : (data.yourSymbol === 'X');
        window.GlassXO.gameState.gameActive = true;
        window.GlassXO.gameState.board = data.board || Array(9).fill(null);
        window.GlassXO.gameState.currentPlayer = data.currentPlayer || 'X';
        window.GlassXO.gameState.gameStartTime = Date.now();
        window.GlassXO.gameState.moveCount = 0;
        window.GlassXO.gameState.roomCode = data.roomCode || data.code;
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è
        window.GlassXO.ui.closeModal('waiting-modal');
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        window.GlassXO.ui.updateGameDisplay();
        window.GlassXO.ui.showScreen('game-screen');
        
        const mySymbol = window.GlassXO.gameState.mySymbol;
        const opponentName = data.opponent?.name || '–°–æ–ø–µ—Ä–Ω–∏–∫';
        const turnMessage = window.GlassXO.gameState.isMyTurn ? '–í–∞—à —Ö–æ–¥!' : `–•–æ–¥ ${opponentName}`;
        
        window.GlassXO.ui.showNotification(`üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –í—ã: ${mySymbol} vs ${opponentName}. ${turnMessage}`, 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersDisplay(data.players);
    }

    // üéØ –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –•–û–î–û–í
    handleMoveMade(data) {
        console.log('üéØ –ü–æ–ª—É—á–µ–Ω —Ö–æ–¥:', data);
        
        if (!window.GlassXO.gameLogic) {
            console.error('‚ùå GameLogic –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
        window.GlassXO.gameState.board = data.board || window.GlassXO.gameState.board;
        window.GlassXO.gameState.currentPlayer = data.currentPlayer;
        window.GlassXO.gameState.gameStatus = data.gameStatus;
        window.GlassXO.gameState.moveCount++;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
        window.GlassXO.gameState.isMyTurn = (data.currentPlayer === window.GlassXO.gameState.mySymbol);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–ª–µ—Ç–∫—É –Ω–∞ –¥–æ—Å–∫–µ
        if (data.position !== undefined && data.symbol) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
            window.GlassXO.gameState.board[data.position] = data.symbol;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            window.GlassXO.ui.updateCellDisplay(data.position, data.symbol);
            window.GlassXO.ui.playSound('move');
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é –¥–æ—Å–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            for (let i = 0; i < 9; i++) {
                window.GlassXO.ui.updateCellDisplay(i, window.GlassXO.gameState.board[i]);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ö–æ–¥–∞
        window.GlassXO.ui.updateTurnIndicator();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ–¥–µ
        const isMyMove = data.symbol === window.GlassXO.gameState.mySymbol;
        if (!isMyMove) {
            window.GlassXO.ui.showNotification(`${data.playerName || '–°–æ–ø–µ—Ä–Ω–∏–∫'} —Å–¥–µ–ª–∞–ª —Ö–æ–¥`, 'info');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        if (data.gameStatus === 'finished' && data.winner) {
            this.handleGameFinished({
                winner: data.winner,
                gameId: data.gameId
            });
        }
    }

    // ‚ùå –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö –•–û–î–ê
    handleMoveError(data) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞:', data);
        window.GlassXO.ui.showNotification(`‚ùå ${data.message}`, 'error');
    }

    // üèÜ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ò–ì–†–´
    handleGameFinished(data) {
        console.log('üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
        
        window.GlassXO.gameState.gameActive = false;
        window.GlassXO.gameState.gameStatus = 'finished';
        window.GlassXO.gameState.winner = data.winner;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–∫–∞—Ö –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (data.playerData) {
            window.GlassXO.gameState.opponentName = data.playerData.opponent?.name || data.opponentName || '–°–æ–ø–µ—Ä–Ω–∏–∫';
            window.GlassXO.gameState.yourName = data.playerData.you?.name || data.yourName || window.GlassXO.player?.nickname || '–í—ã';
        } else {
            // –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            window.GlassXO.gameState.opponentName = data.opponentName || '–°–æ–ø–µ—Ä–Ω–∏–∫';
            window.GlassXO.gameState.yourName = data.yourName || window.GlassXO.player?.nickname || '–í—ã';
        }
        
        if (window.GlassXO.gameLogic) {
            window.GlassXO.gameLogic.handleGameEnd(data);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        let message = '';
        if (data.winner.winner) {
            const isWinner = data.winner.winner === window.GlassXO.gameState.mySymbol;
            if (isWinner) {
                message = `üèÜ ${window.GlassXO.gameState.yourName} –ø–æ–±–µ–¥–∏–ª!`;
            } else {
                message = `üòî ${window.GlassXO.gameState.opponentName} –ø–æ–±–µ–¥–∏–ª!`;
            }
        } else {
            message = `ü§ù –ù–∏—á—å—è –º–µ–∂–¥—É ${window.GlassXO.gameState.yourName} –∏ ${window.GlassXO.gameState.opponentName}!`;
        }
        
        window.GlassXO.ui.showNotification(message, data.winner.winner === window.GlassXO.gameState.mySymbol ? 'success' : 'info');
    }

    // üíî –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø –°–û–ü–ï–†–ù–ò–ö–ê
    handleOpponentDisconnected(data) {
        console.log('üíî –°–æ–ø–µ—Ä–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', data);
        
        window.GlassXO.gameState.gameActive = false;
        window.GlassXO.ui.showNotification(`üíî ${data.message}`, 'warning');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        if (window.GlassXO.ui.showBackToMenuButton) {
            window.GlassXO.ui.showBackToMenuButton();
        }
    }

    // üîç –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ò–°–ö–ê
    handleSearching(data) {
        console.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è
        const queuePosition = document.getElementById('queue-position');
        const estimatedTime = document.getElementById('estimated-time');
        
        if (queuePosition) {
            queuePosition.textContent = data.playersInQueue || '?';
        }
        if (estimatedTime) {
            estimatedTime.textContent = data.playersInQueue ? `~${data.playersInQueue * 30}—Å` : '?';
        }
        
        window.GlassXO.ui.showNotification(data.message || '–ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...', 'info');
    }

    // ‚ùå –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ú–ï–ù–´ –ü–û–ò–°–ö–ê
    handleSearchCancelled(data) {
        console.log('‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω:', data);
        
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        window.GlassXO.ui.closeModal('waiting-modal');
        window.GlassXO.ui.showNotification(data.message || '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω', 'info');
    }

    // üè† –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ì–†–û–ö–û–í
    updatePlayersDisplay(players) {
        if (!players || players.length === 0) return;
        
        console.log('üë• –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:', players);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const player1Info = document.querySelector('.player1-info');
        const player2Info = document.querySelector('.player2-info');
        
        if (player1Info && players[0]) {
            player1Info.innerHTML = `
                <img src="${players[0].avatar}" alt="Avatar" class="player-avatar">
                <span class="player-name">${players[0].name} (${players[0].symbol})</span>
            `;
        }
        
        if (player2Info && players[1]) {
            player2Info.innerHTML = `
                <img src="${players[1].avatar}" alt="Avatar" class="player-avatar">
                <span class="player-name">${players[1].name} (${players[1].symbol})</span>
            `;
        }
    }

    // üîÑ –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–ú–ù–ê–¢–´
    handleRoomUpdated(data) {
        console.log('üîÑ –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
        
        if (data.room && data.room.players) {
            this.updatePlayersDisplay(data.room.players);
            
            const playerCount = data.room.players.length;
            const maxPlayers = data.room.maxPlayers || 2;
            
            window.GlassXO.ui.showNotification(
                `üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ: ${playerCount}/${maxPlayers}`, 
                'info'
            );
        }
    }

    // üö™ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–ó–î–ê–ù–ò–Ø –ö–û–ú–ù–ê–¢–´
    handleRoomCreated(data) {
        console.log('üö™ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
        
        if (data.success && data.code) {
            window.GlassXO.gameState.roomCode = data.code;
            window.GlassXO.ui.showNotification(`üö™ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: ${data.code}`, 'success');
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            if (navigator.clipboard) {
                navigator.clipboard.writeText(data.code).then(() => {
                    window.GlassXO.ui.showNotification('üìã –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'info');
                }).catch(() => {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            window.GlassXO.ui.openModal('waiting-modal');
            document.getElementById('waiting-title').textContent = 'üö™ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞';
            document.getElementById('waiting-message').innerHTML = `
                <div class="room-code-display">
                    <p>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:</p>
                    <div class="room-code">${data.code}</div>
                    <p class="room-share-text">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–æ–º</p>
                </div>
                <p>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</p>
            `;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if (data.room && data.room.players) {
                this.updatePlayersDisplay(data.room.players);
            }
        } else {
            window.GlassXO.ui.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', 'error');
        }
    }

    // üîó –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø –ö –ö–û–ú–ù–ê–¢–ï
    handleRoomJoined(data) {
        console.log('üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', data);
        
        if (data.success && data.code) {
            window.GlassXO.gameState.roomCode = data.code;
            window.GlassXO.ui.showNotification(`‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "${data.name || data.code}"`, 'success');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
            window.GlassXO.ui.openModal('waiting-modal');
            document.getElementById('waiting-title').textContent = 'üîó –í –∫–æ–º–Ω–∞—Ç–µ';
            document.getElementById('waiting-message').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
            if (data.room && data.room.players) {
                this.updatePlayersDisplay(data.room.players);
            }
        } else {
            window.GlassXO.ui.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ', 'error');
        }
    }

    // ‚ùå –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö –ö–û–ú–ù–ê–¢–´
    handleRoomError(data) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–Ω–∞—Ç—ã:', data);
        window.GlassXO.ui.showNotification(`‚ùå ${data.message}`, 'error');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        window.GlassXO.ui.closeModal('waiting-modal');
    }

    handleOnlineStats(stats) {
        window.GlassXO.onlineStats = stats;
        window.GlassXO.ui.updateOnlineStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        if (window.GlassXO.adminPanel && window.GlassXO.adminPanel.isVisible) {
            window.GlassXO.adminPanel.updateStats(stats);
        }
    }

    handleUsersList(users) {
        if (window.GlassXO.adminPanel && window.GlassXO.adminPanel.isVisible) {
            window.GlassXO.adminPanel.updateUsersList(users);
        }
    }

    handleAdminAction(data) {
        console.log('üî• –ü–æ–ª—É—á–µ–Ω–æ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ:', data);
        
        // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ AdminPanel (–µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω)
        if (window.GlassXO.adminPanel) {
            window.GlassXO.adminPanel.handleIncomingAction(data);
        }
        
        // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ EffectsManager (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if (window.GlassXO.effects) {
            window.GlassXO.effects.handleAdminAction(data);
        }
    }

    // üè† –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ü–ò–°–ö–ê –ü–£–ë–õ–ò–ß–ù–´–• –ö–û–ú–ù–ê–¢
    handlePublicRooms(rooms) {
        console.log('üè† –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:', rooms);
        
        if (window.GlassXO.ui && window.GlassXO.ui.updatePublicRoomsList) {
            window.GlassXO.ui.updatePublicRoomsList(rooms);
        }
    }

    // üîÑ –ó–ê–ü–†–û–° –°–ü–ò–°–ö–ê –ü–£–ë–õ–ò–ß–ù–´–• –ö–û–ú–ù–ê–¢
    requestPublicRooms() {
        if (this.socket && this.isConnected) {
            this.socket.emit('getPublicRooms');
        }
    }

    // üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–û–ú–ù–ê–¢
    refreshPublicRooms() {
        if (this.socket && this.isConnected) {
            this.socket.emit('refreshRooms');
        }
    }

    // üö™ –ë–´–°–¢–†–û–ï –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –ö–û–ú–ù–ê–¢–ï
    quickJoinRoom(roomCode) {
        if (this.socket && this.isConnected) {
            this.socket.emit('joinRoom', { code: roomCode });
            console.log(`üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ: ${roomCode}`);
        } else {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø =====
    isOnline() {
        return this.isConnected && this.socket && this.socket.connected;
    }

    getConnectionStatus() {
        return {
            connected: this.isConnected,
            reconnectAttempts: this.reconnectAttempts,
            maxAttempts: this.maxReconnectAttempts
        };
    }

    // ===== –û–ß–ò–°–¢–ö–ê =====
    disconnect() {
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
        }
        
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        this.isConnected = false;
        this.reconnectAttempts = 0;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
window.cancelMatchmaking = () => {
    if (window.GlassXO.socket) {
        window.GlassXO.socket.cancelMatchmaking();
    }
}; 