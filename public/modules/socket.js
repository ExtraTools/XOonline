// ===== SOCKET MANAGER MODULE =====

export class SocketManager {
    constructor() {
        this.socket = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.searchTimer = null;
        
        this.init();
        console.log('üîå SocketManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    init() {
        this.initializeConnection();
    }

    // ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï =====
    initializeConnection() {
        try {
            this.socket = io();
            this.setupEventListeners();
            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Socket.IO:', error);
            this.handleConnectionError();
        }
    }

    setupEventListeners() {
        if (!this.socket) return;

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
        this.socket.on('connect', () => this.handleConnect());
        this.socket.on('disconnect', () => this.handleDisconnect());
        this.socket.on('connect_error', (error) => this.handleConnectionError(error));
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        this.socket.on('player-connected', (data) => this.handlePlayerConnected(data));

        // –ò–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        this.socket.on('gameStart', (data) => this.handleGameStart(data));
        this.socket.on('gameMove', (data) => this.handleGameMove(data));
        this.socket.on('gameEnd', (data) => this.handleGameEnd(data));
        this.socket.on('opponentLeft', () => this.handleOpponentLeft());
        this.socket.on('matchFound', (data) => this.handleMatchFound(data));
        this.socket.on('searching', (data) => this.handleSearching(data));

        // –ö–æ–º–Ω–∞—Ç—ã
        this.socket.on('roomCreated', (data) => this.handleRoomCreated(data));
        this.socket.on('roomJoined', (data) => this.handleRoomJoined(data));
        this.socket.on('roomError', (data) => this.handleRoomError(data));

        // –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.socket.on('onlineStats', (stats) => this.handleOnlineStats(stats));

        // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
        this.socket.on('usersList', (users) => this.handleUsersList(users));

        // –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏—è
        this.socket.on('admin_action_received', (data) => this.handleAdminAction(data));
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====
    handleConnect() {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
        this.isConnected = true;
        this.reconnectAttempts = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const playerData = {
            user: {
                id: window.GlassXO.player.id || null,
                name: window.GlassXO.player.nickname
            },
            guestName: window.GlassXO.player.isGuest ? window.GlassXO.player.nickname : null
        };
        
        this.socket.emit('player-connect', playerData);
        
        window.GlassXO.ui.showNotification('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
    }

    handlePlayerConnected(data) {
        if (data.success && data.player) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const player = data.player;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            window.GlassXO.player = {
                ...window.GlassXO.player,
                id: player.id,
                user_id: player.user_id,
                username: player.username,
                name: player.name,
                nickname: player.name,
                avatar: player.avatar,
                level: player.level || 1,
                stats: player.stats || { gamesPlayed: 0, gamesWon: 0, winRate: 0 },
                isGuest: player.isGuest,
                registration: player.registration,
                ip: player.ip,
                isAdmin: player.isAdmin || false
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            if (window.GlassXO.player.isAdmin && window.GlassXO.adminPanel) {
                window.GlassXO.adminPanel.isAdmin = true;
                const adminBtn = document.getElementById('admin-btn');
                if (adminBtn) {
                    adminBtn.style.display = 'block';
                }
                console.log('üî• –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            window.GlassXO.ui.updatePlayerProfile();
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', window.GlassXO.player);
        }
    }

    handleDisconnect() {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        this.isConnected = false;
        
        window.GlassXO.ui.showNotification('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.attemptReconnect();
    }

    handleConnectionError(error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        this.isConnected = false;
        
        window.GlassXO.ui.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
        this.attemptReconnect();
    }

    attemptReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ò–≥—Ä–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.', 'warning');
            return;
        }

        this.reconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 10000);
        
        setTimeout(() => {
            if (!this.isConnected) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}...`);
                this.socket.connect();
            }
        }, delay);
    }

    // ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ =====
    setNickname(nickname) {
        if (this.socket && this.isConnected) {
            this.socket.emit('setNickname', nickname);
        }
    }

    // ===== –ë–´–°–¢–†–´–ô –ü–û–ò–°–ö =====
    findQuickMatch() {
        if (!this.isConnected) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return;
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è
        window.GlassXO.ui.openModal('waiting-modal');
        document.getElementById('waiting-title').textContent = 'üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã';
        document.getElementById('waiting-message').textContent = '–ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...';
        
        this.socket.emit('findGame');
        this.startMatchmakingTimer();
        
        window.GlassXO.ui.showNotification('üîç –ò—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...', 'info');
    }

    cancelMatchmaking() {
        if (this.socket && this.isConnected) {
            this.socket.emit('cancel-search');
        }
        
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        window.GlassXO.ui.closeModal('waiting-modal');
        window.GlassXO.ui.showNotification('‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω', 'info');
    }

    startMatchmakingTimer() {
        const searchTimeDisplay = document.getElementById('search-time');
        if (!searchTimeDisplay) return;
        
        let searchStartTime = Date.now();
        
        this.searchTimer = setInterval(() => {
            const elapsed = Math.floor((Date.now() - searchStartTime) / 1000);
            searchTimeDisplay.textContent = window.GlassXO.utils.formatTime(elapsed);
        }, 1000);
    }

    // ===== –ö–û–ú–ù–ê–¢–´ =====
    createPrivateRoom() {
        const roomName = document.getElementById('room-name')?.value.trim();
        const roomPassword = document.getElementById('room-password')?.value.trim();
        
        if (!roomName) {
            window.GlassXO.ui.showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã', 'error');
            return;
        }
        
        if (!this.isConnected) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return;
        }
        
        this.socket.emit('createRoom', {
            name: roomName,
            password: roomPassword || null,
            maxPlayers: 2
        });
        
        window.GlassXO.ui.showNotification('üö™ –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É...', 'info');
    }

    joinPrivateRoom() {
        const roomCode = document.getElementById('room-code')?.value.trim();
        
        if (!roomCode) {
            window.GlassXO.ui.showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã', 'error');
            return;
        }
        
        if (!this.isConnected) {
            window.GlassXO.ui.showNotification('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
            return;
        }
        
        this.socket.emit('joinRoom', { code: roomCode });
        window.GlassXO.ui.showNotification('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ...', 'info');
    }

    // ===== –ò–ì–†–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø =====
    sendMove(index, player) {
        if (this.socket && this.isConnected) {
            this.socket.emit('makeMove', { index, player });
        }
    }

    requestRestart() {
        if (this.socket && this.isConnected) {
            this.socket.emit('requestRestart');
        }
    }

    surrender() {
        if (this.socket && this.isConnected) {
            this.socket.emit('surrender');
        }
    }

    // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
    handleGameStart(data) {
        window.GlassXO.gameState.gameMode = 'online';
        window.GlassXO.gameState.mySymbol = data.symbol;
        window.GlassXO.gameState.opponent = data.opponent;
        window.GlassXO.gameState.isMyTurn = data.symbol === 'X';
        window.GlassXO.gameState.gameActive = true;
        window.GlassXO.gameState.board = Array(9).fill(null);
        window.GlassXO.gameState.currentPlayer = 'X';
        window.GlassXO.gameState.gameStartTime = Date.now();
        window.GlassXO.gameState.moveCount = 0;
        window.GlassXO.gameState.roomCode = data.roomCode;
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è
        window.GlassXO.ui.closeModal('waiting-modal');
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        window.GlassXO.ui.updateGameDisplay();
        window.GlassXO.ui.showScreen('game-screen');
        
        window.GlassXO.ui.showNotification(`üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${data.symbol}`, 'success');
    }

    handleGameMove(data) {
        if (window.GlassXO.gameLogic) {
            window.GlassXO.gameLogic.handleOnlineMove(data);
        }
    }

    handleGameEnd(data) {
        if (window.GlassXO.gameLogic) {
            window.GlassXO.gameLogic.handleOnlineGameEnd(data);
        }
    }

    handleOpponentLeft() {
        if (window.GlassXO.gameLogic) {
            window.GlassXO.gameLogic.handleOpponentLeft();
        }
    }

    handleSearching(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è
        document.getElementById('queue-position').textContent = data.position || '?';
        document.getElementById('estimated-time').textContent = 
            data.estimatedWait ? `${Math.round(data.estimatedWait / 60)}–º` : '?';
        
        window.GlassXO.ui.showNotification(`üîç –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${data.position}`, 'info');
    }

    handleMatchFound(data) {
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        window.GlassXO.ui.showNotification(`‚úÖ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: ${data.opponent}`, 'success');
        
        // –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ handleGameStart
    }

    handleRoomCreated(data) {
        window.GlassXO.gameState.roomCode = data.code;
        window.GlassXO.ui.showNotification(`üö™ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: ${data.code}`, 'success');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
        const shareText = `–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: ${data.code}\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–æ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã!`;
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        if (navigator.clipboard) {
            navigator.clipboard.writeText(data.code).then(() => {
                window.GlassXO.ui.showNotification('üìã –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'info');
            });
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è
        window.GlassXO.ui.openModal('waiting-modal');
        document.getElementById('waiting-message').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...';
    }

    handleRoomJoined(data) {
        window.GlassXO.gameState.roomCode = data.code;
        window.GlassXO.ui.showNotification(`‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "${data.name}"`, 'success');
        
        // –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        window.GlassXO.ui.openModal('waiting-modal');
        document.getElementById('waiting-message').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    }

    handleRoomError(data) {
        window.GlassXO.ui.showNotification(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–Ω–∞—Ç—ã: ${data.message}`, 'error');
    }

    handleOnlineStats(stats) {
        window.GlassXO.onlineStats = stats;
        window.GlassXO.ui.updateOnlineStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        if (window.GlassXO.adminPanel && window.GlassXO.adminPanel.isVisible) {
            window.GlassXO.adminPanel.updateStats(stats);
        }
    }

    handleUsersList(users) {
        if (window.GlassXO.adminPanel && window.GlassXO.adminPanel.isVisible) {
            window.GlassXO.adminPanel.updateUsersList(users);
        }
    }

    handleAdminAction(data) {
        console.log('üî• –ü–æ–ª—É—á–µ–Ω–æ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ:', data);
        
        // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ AdminPanel
        if (window.GlassXO.adminPanel) {
            window.GlassXO.adminPanel.handleIncomingAction(data);
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø =====
    isOnline() {
        return this.isConnected && this.socket && this.socket.connected;
    }

    getConnectionStatus() {
        return {
            connected: this.isConnected,
            reconnectAttempts: this.reconnectAttempts,
            maxAttempts: this.maxReconnectAttempts
        };
    }

    // ===== –û–ß–ò–°–¢–ö–ê =====
    disconnect() {
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
        }
        
        if (this.searchTimer) {
            clearInterval(this.searchTimer);
            this.searchTimer = null;
        }
        
        this.isConnected = false;
        this.reconnectAttempts = 0;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
window.cancelMatchmaking = () => {
    if (window.GlassXO.socket) {
        window.GlassXO.socket.cancelMatchmaking();
    }
}; 