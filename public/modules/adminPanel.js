// ===== ADMIN PANEL MODULE =====

export class AdminPanel {
    constructor() {
        this.isVisible = false;
        this.isAdmin = false;
        this.users = [];
        this.stats = { onlinePlayers: 0, activeGames: 0 };
        this.selectedUsers = new Set();
        
        this.init();
        console.log('üî• AdminPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    init() {
        this.createAdminPanel();
        this.setupEventListeners();
        this.setupSecretInput();
    }

    // ===== –°–û–ó–î–ê–ù–ò–ï –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò =====
    createAdminPanel() {
        const panel = document.createElement('div');
        panel.id = 'admin-panel';
        panel.className = 'admin-panel';
        panel.innerHTML = `
            <div class="admin-header">
                <div class="admin-title">
                    <h2>üî• KRESTIKI ADMIN PANEL</h2>
                    <span class="admin-badge">–°–£–ü–ï–† –ê–î–ú–ò–ù</span>
                </div>
                <button class="admin-close" id="admin-close-btn">√ó</button>
            </div>

            <div class="admin-content">
                <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                <div class="admin-section">
                    <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h3>
                    <div class="admin-stats-grid">
                        <div class="admin-stat-card">
                            <div class="stat-icon">üë§</div>
                            <div class="stat-info">
                                <div class="stat-number" id="admin-online">0</div>
                                <div class="stat-label">–û–Ω–ª–∞–π–Ω</div>
                            </div>
                        </div>
                        <div class="admin-stat-card">
                            <div class="stat-icon">üéÆ</div>
                            <div class="stat-info">
                                <div class="stat-number" id="admin-games">0</div>
                                <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä</div>
                            </div>
                        </div>
                        <div class="admin-stat-card">
                            <div class="stat-icon">‚ö°</div>
                            <div class="stat-info">
                                <div class="stat-number" id="admin-actions">0</div>
                                <div class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ -->
                <div class="admin-section">
                    <div class="section-header">
                        <h3>üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <div class="admin-toolbar">
                            <button class="admin-btn mini" id="refresh-users" title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫">
                                üîÑ
                            </button>
                            <button class="admin-btn mini" id="select-all-users" title="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö">
                                ‚òëÔ∏è
                            </button>
                            <button class="admin-btn mini danger" id="clear-selection" title="–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä">
                                ‚ùå
                            </button>
                        </div>
                    </div>
                    
                    <div class="users-container">
                        <div class="users-search">
                            <input type="text" id="users-search" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..." class="admin-input-field">
                        </div>
                        <div class="users-list" id="users-list">
                            <div class="no-users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                        </div>
                    </div>
                </div>

                <!-- –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
                <div class="admin-section">
                    <h3>‚ö° –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                    <div class="mass-actions-grid">
                        <button class="admin-btn danger" id="mass-screamer">
                            üíÄ –°–∫—Ä–∏–º–µ—Ä –≤—Å–µ–º
                        </button>
                        <button class="admin-btn warning" id="mass-disconnect">
                            üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö
                        </button>
                        <button class="admin-btn warning" id="mass-lag">
                            üêå –õ–∞–≥–∏ –≤—Å–µ–º
                        </button>
                        <button class="admin-btn success" id="mass-announce">
                            üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ
                        </button>
                    </div>
                </div>

                <!-- –°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã -->
                <div class="admin-section">
                    <h3>‚ú® –°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã</h3>
                    <div class="effects-grid">
                        <button class="admin-btn" data-effect="rainbow">üåà –†–∞–¥—É–≥–∞</button>
                        <button class="admin-btn" data-effect="shake">üì≥ –¢—Ä—è—Å–∫–∞</button>
                        <button class="admin-btn" data-effect="snow">‚ùÑÔ∏è –°–Ω–µ–≥</button>
                        <button class="admin-btn" data-effect="fireworks">üéÜ –§–µ–π–µ—Ä–≤–µ—Ä–∫</button>
                        <button class="admin-btn" data-effect="matrix">üíä –ú–∞—Ç—Ä–∏—Ü–∞</button>
                        <button class="admin-btn" data-effect="disco">üï∫ –î–∏—Å–∫–æ</button>
                        <button class="admin-btn" data-effect="glitch">üì∫ –ì–ª–∏—Ç—á</button>
                        <button class="admin-btn" data-effect="upside_down">üôÉ –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç</button>
                    </div>
                </div>

                <!-- –¢—Ä–æ–ª–ª–∏–Ω–≥ -->
                <div class="admin-section">
                    <h3>üòà –¢—Ä–æ–ª–ª–∏–Ω–≥ –∞—Ä—Å–µ–Ω–∞–ª</h3>
                    <div class="troll-grid">
                        <div class="troll-card">
                            <h4>üíÄ –°–∫—Ä–∏–º–µ—Ä</h4>
                            <div class="troll-controls">
                                <input type="range" id="screamer-duration" min="3" max="15" value="5" class="admin-slider">
                                <span id="screamer-duration-display">5—Å</span>
                                <button class="admin-btn danger mini" id="custom-screamer">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                            </div>
                        </div>
                        
                        <div class="troll-card">
                            <h4>üêå –õ–∞–≥–∏</h4>
                            <div class="troll-controls">
                                <input type="range" id="lag-intensity" min="1" max="5" value="3" class="admin-slider">
                                <span id="lag-intensity-display">3x</span>
                                <button class="admin-btn warning mini" id="custom-lag">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</button>
                            </div>
                        </div>

                        <div class="troll-card">
                            <h4>üéâ –§–µ–π–∫ –ø–æ–±–µ–¥–∞</h4>
                            <div class="troll-controls">
                                <input type="text" id="fake-win-text" placeholder="–¢–µ–∫—Å—Ç –ø–æ–±–µ–¥—ã..." class="admin-input-field mini">
                                <button class="admin-btn success mini" id="custom-fake-win">–ü–æ–∫–∞–∑–∞—Ç—å</button>
                            </div>
                        </div>

                        <div class="troll-card">
                            <h4>üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ</h4>
                            <div class="troll-controls">
                                <input type="text" id="announcement-text" placeholder="–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è..." class="admin-input-field mini">
                                <button class="admin-btn success mini" id="custom-announce">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã -->
                <div class="admin-section">
                    <h3>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º</h3>
                    <div class="server-controls">
                        <button class="admin-btn warning" id="maintenance-mode">
                            üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                        </button>
                        <button class="admin-btn danger" id="restart-server">
                            ‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
                        </button>
                        <button class="admin-btn" id="clear-effects">
                            üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã
                        </button>
                        <button class="admin-btn success" id="save-config">
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(panel);
    }

    // ===== –°–ï–ö–†–ï–¢–ù–´–ô –í–•–û–î =====
    setupSecretInput() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        const secretInput = document.createElement('input');
        secretInput.type = 'text';
        secretInput.id = 'secret-admin-input';
        secretInput.style.cssText = `
            position: fixed;
            top: 10px;
            left: 10px;
            width: 50px;
            height: 30px;
            opacity: 0;
            border: none;
            background: transparent;
            z-index: 99999;
            pointer-events: auto;
            font-size: 12px;
            color: transparent;
        `;
        
        // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –¥–µ–ª–∞–µ–º –ø–æ–ª–µ –≤–∏–¥–∏–º—ã–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        secretInput.addEventListener('focus', () => {
            secretInput.style.opacity = '0.3';
            secretInput.style.background = 'rgba(255, 0, 0, 0.1)';
            console.log('üîç –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ');
        });
        
        secretInput.addEventListener('blur', () => {
            secretInput.style.opacity = '0';
            secretInput.style.background = 'transparent';
        });
        
        document.body.appendChild(secretInput);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
        secretInput.addEventListener('input', (e) => {
            console.log('üî§ –í–≤–æ–¥ –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ:', e.target.value);
            if (e.target.value.toLowerCase() === 'admin-start') {
                console.log('üéØ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –≤–≤–µ–¥–µ–Ω!');
                this.activateAdmin();
                e.target.value = '';
                e.target.blur();
            }
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
        document.addEventListener('keydown', (e) => {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç A, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª–µ
            if (e.key.toLowerCase() === 'a' && !e.ctrlKey && !e.altKey && !e.metaKey) {
                if (document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
                    secretInput.focus();
                    e.preventDefault();
                }
            }
        });
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        document.addEventListener('click', (e) => {
            if (e.clientX < 80 && e.clientY < 80) {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ');
                secretInput.focus();
                e.preventDefault();
            }
        });
        
        console.log('‚úÖ –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
        console.log('   üìç –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        console.log('   üìç –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –±—É–∫–≤—É "A" –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å');
        console.log('   üìç –í–≤–µ–¥–∏—Ç–µ: admin-start');
    }

    activateAdmin() {
        this.isAdmin = true;
        window.GlassXO.player.isAdmin = true;
        
        console.log('üî• –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
        const notifyServer = () => {
            if (window.GlassXO.socket && window.GlassXO.socket.socket && window.GlassXO.socket.socket.connected) {
                window.GlassXO.socket.socket.emit('admin_activate', {
                    timestamp: Date.now()
                });
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞');
            } else {
                console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
                setTimeout(notifyServer, 1000);
            }
        };
        
        notifyServer();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        const adminBtn = document.getElementById('admin-btn');
        if (adminBtn) {
            adminBtn.style.display = 'block';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const showNotification = () => {
            if (window.GlassXO.ui && window.GlassXO.ui.showNotification) {
                window.GlassXO.ui.showNotification('üî• –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'success');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                alert('üî• –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            }
        };
        
        showNotification();
        
        console.log('üî• –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        this.show();
    }

    // ===== –°–û–ë–´–¢–ò–Ø =====
    setupEventListeners() {
        document.addEventListener('click', (e) => {
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
            if (e.target.id === 'admin-close-btn') {
                this.hide();
            }
            
            // –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (e.target.id === 'admin-btn' && this.isAdmin) {
                this.show();
            }

            // –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if (e.target.id === 'mass-screamer') this.massAction('screamer');
            if (e.target.id === 'mass-disconnect') this.massAction('disconnect');
            if (e.target.id === 'mass-lag') this.massAction('lag');
            if (e.target.id === 'mass-announce') this.massAnnounce();

            // –°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã
            if (e.target.hasAttribute('data-effect')) {
                this.applyEffect(e.target.getAttribute('data-effect'));
            }

            // –¢—Ä–æ–ª–ª–∏–Ω–≥
            if (e.target.id === 'custom-screamer') this.customScreener();
            if (e.target.id === 'custom-lag') this.customLag();
            if (e.target.id === 'custom-fake-win') this.customFakeWin();
            if (e.target.id === 'custom-announce') this.customAnnounce();

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            if (e.target.id === 'refresh-users') this.refreshUsers();
            if (e.target.id === 'select-all-users') this.selectAllUsers();
            if (e.target.id === 'clear-selection') this.clearSelection();

            // –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if (e.target.id === 'clear-effects') this.clearAllEffects();
            if (e.target.id === 'maintenance-mode') this.toggleMaintenance();
            if (e.target.id === 'restart-server') this.restartServer();

            // –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            if (e.target.classList.contains('user-action-btn')) {
                const userId = e.target.getAttribute('data-user-id');
                const action = e.target.getAttribute('data-action');
                this.userAction(userId, action);
            }

            // –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (e.target.classList.contains('user-checkbox')) {
                const userId = e.target.getAttribute('data-user-id');
                this.toggleUserSelection(userId);
            }
        });

        // –°–ª–∞–π–¥–µ—Ä—ã
        document.addEventListener('input', (e) => {
            if (e.target.id === 'screamer-duration') {
                document.getElementById('screamer-duration-display').textContent = e.target.value + '—Å';
            }
            if (e.target.id === 'lag-intensity') {
                document.getElementById('lag-intensity-display').textContent = e.target.value + 'x';
            }
        });

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        document.addEventListener('input', (e) => {
            if (e.target.id === 'users-search') {
                this.filterUsers(e.target.value);
            }
        });
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ù–ï–õ–¨–Æ =====
    show() {
        if (!this.isAdmin) return;
        
        const panel = document.getElementById('admin-panel');
        if (panel) {
            panel.classList.add('active');
            this.isVisible = true;
            this.refreshUsers();
            this.updateStats();
            console.log('üî• –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞');
        }
    }

    hide() {
        const panel = document.getElementById('admin-panel');
        if (panel) {
            panel.classList.remove('active');
            this.isVisible = false;
        }
    }

    // ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò =====
    updateUsersList(users) {
        this.users = users || [];
        this.renderUsers();
    }

    renderUsers() {
        const container = document.getElementById('users-list');
        if (!container) return;

        if (this.users.length === 0) {
            container.innerHTML = '<div class="no-users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        container.innerHTML = this.users.map(user => `
            <div class="admin-user-item" data-user-id="${user.id}">
                <div class="user-checkbox-container">
                    <input type="checkbox" class="user-checkbox" data-user-id="${user.id}" 
                           ${this.selectedUsers.has(user.id) ? 'checked' : ''}>
                </div>
                <div class="user-avatar">
                    <img src="${user.avatar}" alt="${user.name}" onerror="this.src='icons/gameIcons/PNG/Black/1x/button1.png'">
                </div>
                <div class="user-info">
                    <div class="user-name">
                        ${user.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'}
                        ${user.user_id ? `<span class="user-id">#${user.user_id}</span>` : ''}
                    </div>
                    <div class="user-details">
                        <span class="user-status ${user.isGuest ? 'guest' : 'registered'}">
                            ${user.isGuest ? 'üë§ –ì–æ—Å—Ç—å' : '‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'}
                        </span>
                        <span class="user-ip">üìç ${user.ip || 'unknown'}</span>
                        <span class="user-level">‚≠ê –£—Ä. ${user.level || 1}</span>
                    </div>
                </div>
                <div class="user-actions">
                    <button class="admin-mini-btn danger user-action-btn" data-user-id="${user.id}" data-action="screamer" title="–°–∫—Ä–∏–º–µ—Ä">üíÄ</button>
                    <button class="admin-mini-btn warning user-action-btn" data-user-id="${user.id}" data-action="lag" title="–õ–∞–≥–∏">üêå</button>
                    <button class="admin-mini-btn user-action-btn" data-user-id="${user.id}" data-action="fake_win" title="–§–µ–π–∫ –ø–æ–±–µ–¥–∞">üéâ</button>
                    <button class="admin-mini-btn danger user-action-btn" data-user-id="${user.id}" data-action="disconnect" title="–û—Ç–∫–ª—é—á–∏—Ç—å">üö´</button>
                </div>
            </div>
        `).join('');
    }

    refreshUsers() {
        if (window.GlassXO.socket && window.GlassXO.socket.socket) {
            window.GlassXO.socket.socket.emit('admin_get_users');
        }
    }

    selectAllUsers() {
        this.users.forEach(user => this.selectedUsers.add(user.id));
        this.renderUsers();
    }

    clearSelection() {
        this.selectedUsers.clear();
        this.renderUsers();
    }

    toggleUserSelection(userId) {
        if (this.selectedUsers.has(userId)) {
            this.selectedUsers.delete(userId);
        } else {
            this.selectedUsers.add(userId);
        }
    }

    filterUsers(searchTerm) {
        const items = document.querySelectorAll('.admin-user-item');
        const term = searchTerm.toLowerCase();
        
        items.forEach(item => {
            const name = item.querySelector('.user-name').textContent.toLowerCase();
            const id = item.querySelector('.user-id')?.textContent.toLowerCase() || '';
            const ip = item.querySelector('.user-ip').textContent.toLowerCase();
            
            if (name.includes(term) || id.includes(term) || ip.includes(term)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // ===== –î–ï–ô–°–¢–í–ò–Ø =====
    massAction(action) {
        const targets = Array.from(this.selectedUsers);
        if (targets.length === 0) {
            if (window.GlassXO.ui) {
                window.GlassXO.ui.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è', 'warning');
            }
            return;
        }

        this.sendAdminAction(action, { targets, mass: true });
        
        const messages = {
            screamer: 'üíÄ –°–∫—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!',
            disconnect: 'üö´ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã!',
            lag: 'üêå –õ–∞–≥–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö!'
        };

        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification(messages[action], 'success');
        }
    }

    userAction(userId, action) {
        this.sendAdminAction(action, { targets: [userId] });
        
        const messages = {
            screamer: 'üíÄ –°–∫—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
            lag: 'üêå –õ–∞–≥–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!',
            fake_win: 'üéâ –§–µ–π–∫–æ–≤–∞—è –ø–æ–±–µ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∞!',
            disconnect: 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω!'
        };

        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification(messages[action], 'success');
        }
    }

    applyEffect(effect) {
        const targets = Array.from(this.selectedUsers);
        this.sendAdminAction(effect, { targets });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification(`‚ú® –≠—Ñ—Ñ–µ–∫—Ç "${effect}" –ø—Ä–∏–º–µ–Ω—ë–Ω!`, 'success');
        }
    }

    customScreener() {
        const duration = document.getElementById('screamer-duration').value * 1000;
        const targets = Array.from(this.selectedUsers);
        
        this.sendAdminAction('screamer', { targets, duration });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification(`üíÄ –°–∫—Ä–∏–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${duration/1000}—Å!`, 'success');
        }
    }

    customLag() {
        const intensity = document.getElementById('lag-intensity').value;
        const targets = Array.from(this.selectedUsers);
        
        this.sendAdminAction('lag', { targets, intensity });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification(`üêå –õ–∞–≥–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã (${intensity}x)!`, 'success');
        }
    }

    customFakeWin() {
        const message = document.getElementById('fake-win-text').value || '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!';
        const targets = Array.from(this.selectedUsers);
        
        this.sendAdminAction('fake_win', { targets, message });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification('üéâ –§–µ–π–∫–æ–≤–∞—è –ø–æ–±–µ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
        }
    }

    customAnnounce() {
        const message = document.getElementById('announcement-text').value;
        if (!message.trim()) return;
        
        const targets = Array.from(this.selectedUsers);
        this.sendAdminAction('announce', { targets, message });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification('üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        }
        
        document.getElementById('announcement-text').value = '';
    }

    massAnnounce() {
        const message = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:');
        if (!message) return;
        
        this.sendAdminAction('announce', { targets: 'all', message });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification('üì¢ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        }
    }

    clearAllEffects() {
        this.sendAdminAction('clear_effects', { targets: 'all' });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification('üßπ –í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—á–∏—â–µ–Ω—ã!', 'success');
        }
    }

    toggleMaintenance() {
        this.sendAdminAction('maintenance', { enabled: true });
        
        if (window.GlassXO.ui) {
            window.GlassXO.ui.showNotification('üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'warning');
        }
    }

    restartServer() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?')) {
            this.sendAdminAction('restart_server', {});
            
            if (window.GlassXO.ui) {
                window.GlassXO.ui.showNotification('‚ôªÔ∏è –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', 'warning');
            }
        }
    }

    // ===== –û–¢–ü–†–ê–í–ö–ê –ö–û–ú–ê–ù–î =====
    sendAdminAction(action, data) {
        if (window.GlassXO.socket && window.GlassXO.socket.socket) {
            window.GlassXO.socket.socket.emit('admin_action', {
                action: action,
                data: data,
                timestamp: Date.now()
            });
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π
        const counter = document.getElementById('admin-actions');
        if (counter) {
            const current = parseInt(counter.textContent) || 0;
            counter.textContent = current + 1;
        }
    }

    // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
    updateStats(stats) {
        if (stats) {
            this.stats = stats;
        }
        
        const onlineEl = document.getElementById('admin-online');
        const gamesEl = document.getElementById('admin-games');
        
        if (onlineEl) onlineEl.textContent = this.stats.onlinePlayers || 0;
        if (gamesEl) gamesEl.textContent = this.stats.activeGames || 0;
    }

    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ò–• –î–ï–ô–°–¢–í–ò–ô =====
    handleIncomingAction(data) {
        if (window.GlassXO.effects) {
            window.GlassXO.effects.handleAdminAction(data);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.quickTroll = (userId, trollType) => {
    if (window.GlassXO.adminPanel) {
        window.GlassXO.adminPanel.quickTroll(userId, trollType);
    }
}; 