// ===== DINOSGAMES - –ú–ò–ù–ò–ú–ê–õ–ò–°–¢–ò–ß–ù–û–ï –õ–û–ë–ë–ò =====
console.log('üìú script.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å HTML (–æ–±—ä—è–≤–ª—è–µ–º —Å—Ä–∞–∑—É)
let app = null;
console.log('üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');

function showAuth(mode) {
    console.log('üîê showAuth –≤—ã–∑–≤–∞–Ω–∞, —Ä–µ–∂–∏–º:', mode);
    if (app) {
        app.showAuth(mode);
    } else {
        console.warn('‚ö†Ô∏è app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

function hideAuth() {
    console.log('üö™ hideAuth –≤—ã–∑–≤–∞–Ω–∞');
    if (app) {
        app.hideAuth();
    } else {
        console.warn('‚ö†Ô∏è app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

function switchAuthMode() {
    console.log('üîÑ switchAuthMode –≤—ã–∑–≤–∞–Ω–∞');
    if (app) {
        app.switchAuthMode();
    } else {
        console.warn('‚ö†Ô∏è app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

function logout() {
    console.log('üëã logout –≤—ã–∑–≤–∞–Ω–∞');
    if (app) {
        app.logout();
    } else {
        console.warn('‚ö†Ô∏è app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

function playGame(gameType) {
    console.log('üéÆ playGame –≤—ã–∑–≤–∞–Ω–∞, —Ç–∏–ø –∏–≥—Ä—ã:', gameType);
    if (app) {
        app.playGame(gameType);
    } else {
        console.warn('‚ö†Ô∏è app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

function backToGames() {
    console.log('‚Ü©Ô∏è backToGames –≤—ã–∑–≤–∞–Ω–∞');
    if (app) {
        app.backToGames();
    } else {
        console.warn('‚ö†Ô∏è app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

function playSound(type) {
    console.log('üîä playSound –≤—ã–∑–≤–∞–Ω–∞, —Ç–∏–ø:', type);
    if (app) {
        app.playSound(type);
    } else {
        console.warn('‚ö†Ô∏è app –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

class DinosGamesApp {
    constructor() {
        this.currentUser = null;
        this.isAuthenticated = false;
        this.authMode = 'login';
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.checkAuthStatus();
        this.loadGameStats();
        this.handleAudioErrors();
    }

    setupEventListeners() {
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');

        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        if (registerForm) {
            registerForm.addEventListener('submit', (e) => this.handleRegister(e));
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.hideAuth();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideAuth();
            }
        });
    }

    checkAuthStatus() {
        const userData = localStorage.getItem('userData');
        if (userData) {
            try {
                this.currentUser = JSON.parse(userData);
                this.isAuthenticated = true;
                this.showUserProfile();
                this.updateGameStats();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                localStorage.removeItem('userData');
            }
        } else {
            this.showLoginButton();
        }
    }

    showUserProfile() {
        const loginButton = document.getElementById('login-button');
        const userProfile = document.getElementById('user-profile');

        if (loginButton) loginButton.style.display = 'none';
        if (userProfile) {
            userProfile.style.display = 'flex';
            
            document.getElementById('user-name').textContent = this.currentUser.username || this.currentUser.name;
            document.getElementById('user-level').textContent = `–£—Ä–æ–≤–µ–Ω—å ${this.currentUser.level || 1}`;
            document.getElementById('user-avatar').src = this.currentUser.avatar || 
                `https://api.dicebear.com/7.x/avataaars/svg?seed=${this.currentUser.username || 'user'}`;
        }
    }

    showLoginButton() {
        const loginButton = document.getElementById('login-button');
        const userProfile = document.getElementById('user-profile');

        if (userProfile) userProfile.style.display = 'none';
        if (loginButton) loginButton.style.display = 'flex';
    }

    updateGameStats() {
        if (!this.currentUser) return;

        const stats = this.currentUser.gameStats?.ticTacToe || this.currentUser.stats || {};
        
        const tttGames = document.getElementById('ttt-games');
        const tttWins = document.getElementById('ttt-wins');

        if (tttGames) tttGames.textContent = stats.gamesPlayed || 0;
        if (tttWins) tttWins.textContent = stats.gamesWon || 0;
    }

    loadGameStats() {
        if (!this.isAuthenticated) {
            const guestStats = {
                games: 0,
                wins: 0
            };

            const tttGames = document.getElementById('ttt-games');
            const tttWins = document.getElementById('ttt-wins');

            if (tttGames) tttGames.textContent = guestStats.games;
            if (tttWins) tttWins.textContent = guestStats.wins;
        }
    }

    showAuth(mode = 'login') {
        this.authMode = mode;
        const authModal = document.getElementById('auth-modal');
        const authTitle = document.getElementById('auth-title');
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('register-form');
        const authSwitchBtn = document.getElementById('auth-switch-btn');

        if (!authModal) return;

        authModal.classList.add('active');

        if (mode === 'login') {
            if (authTitle) authTitle.textContent = '–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç';
            if (loginForm) loginForm.style.display = 'flex';
            if (registerForm) registerForm.style.display = 'none';
            if (authSwitchBtn) authSwitchBtn.textContent = '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å';
        } else {
            if (authTitle) authTitle.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
            if (loginForm) loginForm.style.display = 'none';
            if (registerForm) registerForm.style.display = 'flex';
            if (authSwitchBtn) authSwitchBtn.textContent = '–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ';
        }
    }

    hideAuth() {
        const authModal = document.getElementById('auth-modal');
        if (authModal) {
            authModal.classList.remove('active');
        }
        
        this.clearAuthForms();
    }

    switchAuthMode() {
        this.showAuth(this.authMode === 'login' ? 'register' : 'login');
    }

    clearAuthForms() {
        const forms = ['login-form', 'register-form'];
        forms.forEach(formId => {
            const form = document.getElementById(formId);
            if (form) form.reset();
        });
    }

    async handleLogin(event) {
        event.preventDefault();
        
        const email = document.getElementById('login-email').value;
        const password = document.getElementById('login-password').value;

        if (!email || !password) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        this.showNotification('–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...', 'info');

        try {
            const response = await this.mockLogin(email, password);
            
            if (response.success) {
                this.currentUser = response.user;
                this.isAuthenticated = true;
                
                localStorage.setItem('userData', JSON.stringify(this.currentUser));
                
                this.hideAuth();
                this.showUserProfile();
                this.updateGameStats();
                
                this.showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${this.currentUser.username}!`, 'success');
            } else {
                this.showNotification(response.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        }
    }

    async handleRegister(event) {
        event.preventDefault();
        
        const username = document.getElementById('register-username').value;
        const email = document.getElementById('register-email').value;
        const password = document.getElementById('register-password').value;
        const confirmPassword = document.getElementById('register-password-confirm').value;

        if (!username || !email || !password || !confirmPassword) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        if (password !== confirmPassword) {
            this.showNotification('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
            return;
        }

        if (password.length < 6) {
            this.showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            return;
        }

        if (username.length < 3) {
            this.showNotification('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', 'error');
            return;
        }

        this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...', 'info');

        try {
            const response = await this.mockRegister(username, email, password);
            
            if (response.success) {
                this.currentUser = response.user;
                this.isAuthenticated = true;
                
                localStorage.setItem('userData', JSON.stringify(this.currentUser));
                
                this.hideAuth();
                this.showUserProfile();
                this.updateGameStats();
                
                this.showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DinosGames, ${this.currentUser.username}!`, 'success');
            } else {
                this.showNotification(response.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        }
    }

    async mockLogin(email, password) {
        return new Promise((resolve) => {
            setTimeout(() => {
                const existingUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');
                const user = existingUsers.find(u => u.email === email);

                if (user && user.password === password) {
                    resolve({
                        success: true,
                        user: {
                            id: user.id,
                            username: user.username,
                            email: user.email,
                            avatar: user.avatar,
                            level: user.level || 1,
                            gameStats: user.gameStats || {
                                ticTacToe: {
                                    gamesPlayed: 0,
                                    gamesWon: 0
                                }
                            },
                            createdAt: user.createdAt
                        }
                    });
                } else {
                    resolve({
                        success: false,
                        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
                    });
                }
            }, 800);
        });
    }

    async mockRegister(username, email, password) {
        return new Promise((resolve) => {
            setTimeout(() => {
                const existingUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');
                
                if (existingUsers.some(u => u.email === email)) {
                    resolve({
                        success: false,
                        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                    });
                    return;
                }

                if (existingUsers.some(u => u.username === username)) {
                    resolve({
                        success: false,
                        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                    });
                    return;
                }

                const newUser = {
                    id: Date.now(),
                    username,
                    email,
                    password,
                    avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${username}`,
                    level: 1,
                    gameStats: {
                        ticTacToe: {
                            gamesPlayed: 0,
                            gamesWon: 0
                        }
                    },
                    createdAt: new Date().toISOString()
                };

                existingUsers.push(newUser);
                localStorage.setItem('registeredUsers', JSON.stringify(existingUsers));

                resolve({
                    success: true,
                    user: {
                        id: newUser.id,
                        username: newUser.username,
                        email: newUser.email,
                        avatar: newUser.avatar,
                        level: newUser.level,
                        gameStats: newUser.gameStats,
                        createdAt: newUser.createdAt
                    }
                });
            }, 1000);
        });
    }

    logout() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            this.currentUser = null;
            this.isAuthenticated = false;
            
            localStorage.removeItem('userData');
            
            this.showLoginButton();
            this.loadGameStats();
            
            this.showNotification('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'success');
        }
    }

    playGame(gameType) {
        if (gameType === 'ticTacToe') {
            window.location.href = '/games/krestiki/';
        } else {
            this.showNotification(`–ò–≥—Ä–∞ "${gameType}" –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!`, 'info');
        }
    }

    backToGames() {
        const gameScreen = document.getElementById('tic-tac-toe-game');
        if (gameScreen) {
            gameScreen.style.display = 'none';
        }
    }

    showNotification(message, type = 'info') {
        const notifications = document.getElementById('notifications');
        if (!notifications) return;

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <span>${message}</span>
            <button onclick="this.parentElement.remove()" style="background: none; border: none; color: inherit; margin-left: 1rem; cursor: pointer;">√ó</button>
        `;

        notifications.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    handleAudioErrors() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web Audio API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤ (–∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
        this.initAudioContext();
        console.log('üîä –ó–≤—É–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ Web Audio API');
    }

    initAudioContext() {
        try {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        } catch (error) {
            console.warn('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', error);
        }
    }

    playSound(type = 'move') {
        if (!this.audioContext) return;

        try {
            const oscillator = this.audioContext.createOscillator();
            const gainNode = this.audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(this.audioContext.destination);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            switch(type) {
                case 'move':
                    oscillator.frequency.setValueAtTime(400, this.audioContext.currentTime);
                    oscillator.type = 'square';
                    gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.1);
                    break;
                case 'win':
                    oscillator.frequency.setValueAtTime(600, this.audioContext.currentTime);
                    oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime + 0.1);
                    oscillator.type = 'sine';
                    gainNode.gain.setValueAtTime(0.2, this.audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.3);
                    break;
                default:
                    oscillator.frequency.setValueAtTime(200, this.audioContext.currentTime);
                    oscillator.type = 'triangle';
                    gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.2);
            }
            
            oscillator.start(this.audioContext.currentTime);
            oscillator.stop(this.audioContext.currentTime + 0.5);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
        }
    }
}

// ===== –ú–ò–ù–ò-–ò–ì–†–ê –î–ò–ù–û–ó–ê–í–†–ò–ö =====
class DinoGame {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.score = 0;
        this.gameSpeed = 2; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ
        this.gravity = 0.4; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ
        this.jumpPower = 10; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –ø—Ä—ã–∂–æ–∫
        this.running = false;
        this.groundY = 150;
        
        this.dino = {
            x: 50,
            y: this.groundY,
            width: 30, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å
            height: 30, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å
            velocityY: 0,
            onGround: true
        };
        
        this.obstacles = [];
        this.obstacleTimer = 0;
        this.obstacleInterval = 100; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏
        this.clouds = [
            {x: 200, y: 30},
            {x: 450, y: 50},
            {x: 650, y: 25}
        ];
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏
        this.isDead = false;
        this.deathAnimation = {
            frame: 0,
            maxFrames: 30,
            explosionParticles: []
        };
        
        this.setupControls();
    }
    
    setupControls() {
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                this.jump();
            }
        });
        
        this.canvas.addEventListener('click', () => {
            this.jump();
        });
    }
    
    jump() {
        if (this.dino.onGround) {
            this.dino.velocityY = -this.jumpPower;
            this.dino.onGround = false;
        }
    }
    
    update() {
        if (!this.running) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–Ω–æ–∑–∞–≤—Ä–∞
        this.dino.velocityY += this.gravity;
        this.dino.y += this.dino.velocityY;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–µ–º–ª–∏
        if (this.dino.y >= this.groundY) {
            this.dino.y = this.groundY;
            this.dino.velocityY = 0;
            this.dino.onGround = true;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π (–±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        this.obstacleTimer++;
        if (this.obstacleTimer >= this.obstacleInterval) {
            // –°–ª—É—á–∞–π–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            const obstacleTypes = [
                {emoji: 'üåµ', width: 20, height: 25, y: 165},
                {emoji: 'ü™®', width: 25, height: 15, y: 175},
                {emoji: 'üåø', width: 15, height: 25, y: 165}
            ];
            
            const randomType = obstacleTypes[Math.floor(Math.random() * obstacleTypes.length)];
            
            this.obstacles.push({
                x: 800,
                y: randomType.y,
                width: randomType.width,
                height: randomType.height,
                emoji: randomType.emoji
            });
            
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—á–µ–º –±–æ–ª—å—à–µ —Å—á–µ—Ç, —Ç–µ–º —á–∞—â–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è)
            this.obstacleInterval = Math.max(60, 120 - Math.floor(this.score / 100));
            this.obstacleTimer = 0;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞–∫–∞ (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
        this.clouds.forEach(cloud => {
            cloud.x -= this.gameSpeed * 0.3; // –û–±–ª–∞–∫–∞ –¥–≤–∏–∂—É—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ
            if (cloud.x < -50) {
                cloud.x = 850; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–ª–∞–∫–æ —Å–ø—Ä–∞–≤–∞
                cloud.y = 20 + Math.random() * 40; // –°–ª—É—á–∞–π–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        for (let i = this.obstacles.length - 1; i >= 0; i--) {
            const obstacle = this.obstacles[i];
            if (!obstacle) continue; // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
            
            obstacle.x -= this.gameSpeed;
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∑–∞ —ç–∫—Ä–∞–Ω–æ–º
            if (obstacle.x < -30) {
                this.obstacles.splice(i, 1);
                this.score += 10;
                document.getElementById('score').textContent = this.score;
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
            if (this.checkCollision(this.dino, obstacle)) {
                this.startDeathAnimation();
                return;
            }
        }
        
        // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        if (!this.isDead) {
            this.gameSpeed += 0.002;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–º–µ—Ä—Ç–∏
        if (this.isDead) {
            this.updateDeathAnimation();
        }
    }
    
    checkCollision(rect1, rect2) {
        if (!rect1 || !rect2) return false; // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
        
        // –¢–æ—á–Ω—ã–µ —Ö–∏—Ç–±–æ–∫—Å—ã –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ padding
        const padding = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
        
        return rect1.x + padding < rect2.x + rect2.width - padding &&
               rect1.x + rect1.width - padding > rect2.x + padding &&
               rect1.y + padding < rect2.y + rect2.height - padding &&
               rect1.y + rect1.height - padding > rect2.y + padding;
    }
    
    draw() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞
        this.ctx.fillStyle = '#87ceeb'; // –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
        this.ctx.fillRect(0, 0, 800, 200);
        
        // –ó–µ–º–ª—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const gradient = this.ctx.createLinearGradient(0, 190, 0, 200);
        gradient.addColorStop(0, '#90ee90');
        gradient.addColorStop(1, '#228b22');
        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(0, 190, 800, 10);
        
        // –û–±–ª–∞–∫–∞ (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        this.ctx.font = '24px Arial';
        this.clouds.forEach(cloud => {
            this.ctx.fillText('‚òÅÔ∏è', cloud.x, cloud.y);
        });
        
        // –î–∏–Ω–æ–∑–∞–≤—Ä (—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π)
        this.ctx.save();
        this.ctx.scale(-1, 1); // –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
        this.ctx.font = '40px Arial';
        
        if (this.isDead) {
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏ - –º–∏–≥–∞—é—â–∏–π –∫—Ä–∞—Å–Ω—ã–π –¥–∏–Ω–æ–∑–∞–≤—Ä
            if (Math.floor(this.deathAnimation.frame / 5) % 2 === 0) {
                this.ctx.filter = 'hue-rotate(0deg) brightness(1.5) saturate(2)';
                this.ctx.fillText('üíÄ', -(this.dino.x + 40), this.dino.y + 35);
            } else {
                this.ctx.filter = 'hue-rotate(0deg) brightness(0.5)';
                this.ctx.fillText('ü¶ï', -(this.dino.x + 40), this.dino.y + 35);
            }
        } else {
            this.ctx.fillText('ü¶ï', -(this.dino.x + 40), this.dino.y + 35);
        }
        this.ctx.filter = 'none';
        this.ctx.restore();
        
        // –ß–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
        if (this.isDead) {
            this.drawExplosionParticles();
        }
        
        // –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã)
        this.ctx.font = '28px Arial';
        this.obstacles.forEach(obstacle => {
            if (obstacle && obstacle.emoji) {
                this.ctx.fillText(obstacle.emoji, obstacle.x, obstacle.y + 25);
            }
        });
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        this.ctx.font = '12px Arial';
        this.ctx.fillText(`–°–∫–æ—Ä–æ—Å—Ç—å: ${this.gameSpeed.toFixed(1)}`, 10, 20);
        
        // –û—Ç–ª–∞–¥–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
        if (window.DEBUG_MODE) {
            this.drawDebugHitboxes();
        }
    }
    
    gameLoop() {
        this.update();
        this.draw();
        
        if (this.running) {
            requestAnimationFrame(() => this.gameLoop());
        }
    }
    
    start() {
        this.running = true;
        this.isDead = false;
        this.score = 0;
        this.gameSpeed = 2;
        this.obstacles = [];
        this.obstacleTimer = 0;
        this.obstacleInterval = 100;
        this.dino.y = this.groundY;
        this.dino.velocityY = 0;
        this.dino.onGround = true;
        
        // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–º–µ—Ä—Ç–∏
        this.deathAnimation = {
            frame: 0,
            maxFrames: 30,
            explosionParticles: []
        };
        
        // –°–±—Ä–æ—Å –æ–±–ª–∞–∫–æ–≤
        this.clouds = [
            {x: 200, y: 30},
            {x: 450, y: 50}, 
            {x: 650, y: 25}
        ];
        
        document.getElementById('score').textContent = '0';
        this.gameLoop();
    }
    
    startDeathAnimation() {
        this.isDead = true;
        this.running = false;
        this.deathAnimation.frame = 0;
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞
        for (let i = 0; i < 15; i++) {
            this.deathAnimation.explosionParticles.push({
                x: this.dino.x + 20,
                y: this.dino.y + 20,
                vx: (Math.random() - 0.5) * 10,
                vy: (Math.random() - 0.5) * 10,
                life: 30,
                maxLife: 30,
                emoji: ['üí•', '‚≠ê', '‚ú®', 'üí´'][Math.floor(Math.random() * 4)]
            });
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º game over
        setTimeout(() => {
            this.gameOver();
        }, 2000);
    }
    
    updateDeathAnimation() {
        this.deathAnimation.frame++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞
        this.deathAnimation.explosionParticles.forEach(particle => {
            particle.x += particle.vx;
            particle.y += particle.vy;
            particle.vy += 0.3; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
            particle.life--;
        });
        
        // –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã
        this.deathAnimation.explosionParticles = this.deathAnimation.explosionParticles.filter(p => p.life > 0);
    }
    
    drawExplosionParticles() {
        this.ctx.font = '16px Arial';
        this.deathAnimation.explosionParticles.forEach(particle => {
            const alpha = particle.life / particle.maxLife;
            this.ctx.globalAlpha = alpha;
            this.ctx.fillText(particle.emoji, particle.x, particle.y);
        });
        this.ctx.globalAlpha = 1;
    }
    
    drawDebugHitboxes() {
        // –•–∏—Ç–±–æ–∫—Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞
        this.ctx.strokeStyle = 'red';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(this.dino.x, this.dino.y, this.dino.width, this.dino.height);
        
        // –•–∏—Ç–±–æ–∫—Å—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        this.ctx.strokeStyle = 'blue';
        this.obstacles.forEach(obstacle => {
            if (obstacle) {
                this.ctx.strokeRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
            }
        });
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–∏–∑–∏—è—Ö
        this.ctx.fillStyle = 'white';
        this.ctx.font = '10px Arial';
        this.ctx.fillText(`Dino: ${this.dino.x},${this.dino.y} ${this.dino.width}x${this.dino.height}`, 10, 40);
        
        // –ë–ª–∏–∂–∞–π—à–µ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
        const nearestObstacle = this.obstacles.find(obs => obs && obs.x > this.dino.x && obs.x < this.dino.x + 100);
        if (nearestObstacle) {
            this.ctx.fillText(`Obstacle: ${nearestObstacle.x},${nearestObstacle.y} ${nearestObstacle.width}x${nearestObstacle.height}`, 10, 55);
            const distance = nearestObstacle.x - (this.dino.x + this.dino.width);
            this.ctx.fillText(`Distance: ${distance.toFixed(1)}px`, 10, 70);
        }
    }
    
    gameOver() {
        this.running = false;
        this.isDead = false;
        
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        this.ctx.fillRect(0, 0, 800, 200);
        
        this.ctx.fillStyle = 'white';
        this.ctx.font = '24px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('üíÄ GAME OVER üíÄ', 400, 80);
        this.ctx.font = '16px Arial';
        this.ctx.fillText(`–°—á—ë—Ç: ${this.score}`, 400, 110);
        this.ctx.fillText('–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞', 400, 140);
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ –∫–ª–∏–∫—É
        setTimeout(() => {
            this.canvas.addEventListener('click', () => {
                this.start();
            }, { once: true });
        }, 1000);
    }
}

let dinoGameInstance = null;

function startDinoGame() {
    const gameModal = document.getElementById('dino-game');
    gameModal.style.display = 'flex';
    
    if (!dinoGameInstance) {
        dinoGameInstance = new DinoGame();
    }
    
    dinoGameInstance.start();
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
    if (app) app.playSound('move');
}

function closeDinoGame() {
    const gameModal = document.getElementById('dino-game');
    gameModal.style.display = 'none';
    
    if (dinoGameInstance) {
        dinoGameInstance.running = false;
    }
}

// –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏—à–µ–π D)
window.DEBUG_MODE = false;
document.addEventListener('keydown', (e) => {
    if (e.code === 'KeyD') {
        window.DEBUG_MODE = !window.DEBUG_MODE;
        console.log(`Debug mode: ${window.DEBUG_MODE ? 'ON' : 'OFF'}`);
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü
let particleSystem = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    app = new DinosGamesApp();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–∏—Ü
    if (window.ParticleSystem) {
        setTimeout(() => {
            particleSystem = new ParticleSystem();
            console.log('‚ú® –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä—É–∑–∫–∏ DOM
    }
    
    console.log('ü¶ï DinosGames –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
    console.log('üí° –ù–∞–∂–º–∏—Ç–µ D –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ö–∏—Ç–±–æ–∫—Å–æ–≤');
}); 