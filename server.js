// Server Module - DinoGames 2025
// ES Modules –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Node.js

import express from 'express';
import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';
import session from 'express-session';
import rateLimit from 'express-rate-limit';

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–æ—É—Ç–æ–≤
import { initDatabase, sessionQueries } from './server/database/database.js';
import authRoutes from './server/routes/auth.js';
import lobbyRoutes from './server/routes/lobby.js';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–ª—É—á–µ–Ω–∏–µ __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const httpServer = createServer(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const io = new SocketIOServer(httpServer, {
    cors: {
        origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
        credentials: true
    },
    transports: ['websocket', 'polling']
});

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https://unpkg.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "data:"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'", "ws:", "wss:", "https://discord.com", "https://discordapp.com"]
        }
    }
}));

// CORS
app.use(cors({
    origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
    credentials: true
}));

// Rate limiting
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤
});

app.use('/api/', limiter);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`üìù ${req.method} ${req.path} - ${req.ip}`);
    next();
});

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°–µ—Å—Å–∏–∏
if (process.env.NODE_ENV === 'production') {
    // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è Railway
    app.use(session({
        secret: process.env.SESSION_SECRET || 'dino-secret-railway-prod',
        resave: false,
        saveUninitialized: false,
        cookie: {
            secure: false, // HTTP –≤ Railway
            httpOnly: true,
            maxAge: 1000 * 60 * 60 * 24 // 1 –¥–µ–Ω—å –¥–ª—è production
        }
    }));
} else {
    // –í development —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    app.use(session({
        secret: process.env.SESSION_SECRET || 'dino-secret',
        resave: false,
        saveUninitialized: false,
        cookie: {
            secure: false,
            httpOnly: true,
            maxAge: 1000 * 60 * 60 * 24 * 7 // 7 –¥–Ω–µ–π
        }
    }));
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(join(__dirname, 'public')));
app.use('/socket.io', express.static(join(__dirname, 'node_modules/socket.io/client-dist')));
app.use('/FRONTS', express.static(join(__dirname, 'FRONTS')));

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/lobby', lobbyRoutes);

// –°–∏—Å—Ç–µ–º–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date() });
});

// Health check –¥–ª—è Railway
app.get('/health', (req, res) => {
    console.log('üè• Health check –∑–∞–ø—Ä–æ—Å');
    res.status(200).json({ 
        status: 'healthy', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

app.get('/', (req, res) => {
    console.log('üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    res.sendFile(join(__dirname, 'public', 'index.html'));
});

app.get('/api/status', (req, res) => {
        res.json({
        status: 'ok', 
        message: 'DinosGames —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
        version: '2.0.0',
        features: [
            'Express —Å–µ—Ä–≤–µ—Ä',
            'SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 
            '–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            'Socket.IO',
            '–®—Ä–∏—Ñ—Ç—ã Benzin',
            '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞'
        ]
    });
});

// SPA fallback - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
app.get('*', (req, res) => {
    res.sendFile(join(__dirname, 'public', 'index.html'));
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DinosGames...');
console.log(`üì° –ü–æ—Ä—Ç: ${PORT}`);
console.log(`üåç NODE_ENV: ${process.env.NODE_ENV || 'development'}`);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å—Ä–∞–∑—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ë–î
httpServer.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ DinoGames —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ 0.0.0.0:${PORT}`);
    console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    initDatabase()
        .then(() => {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –≥–æ—Ç–æ–≤–∞');
            // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            sessionQueries.cleanup()
                .then(() => console.log('üßπ –û—á–∏—â–µ–Ω—ã –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏'))
                .catch(err => console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', err));
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            // –ù–µ –≤—ã—Ö–æ–¥–∏–º, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ë–î
        });
}).on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    httpServer.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    httpServer.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
}); 