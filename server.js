// Server Module - DinoGames 2025
// ES Modules –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Node.js

import express from 'express';
import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';
import session from 'express-session';
import rateLimit from 'express-rate-limit';

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–æ—É—Ç–æ–≤
import { initDatabase, sessionQueries } from './server/database/database.js';
import authRoutes from './server/routes/auth.js';
import lobbyRoutes from './server/routes/lobby.js';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–ª—É—á–µ–Ω–∏–µ __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const httpServer = createServer(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const io = new SocketIOServer(httpServer, {
    cors: {
        origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
        credentials: true
    },
    transports: ['websocket', 'polling']
});

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https://unpkg.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "data:"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'", "ws:", "wss:"]
        }
    }
}));

// CORS
app.use(cors({
    origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
    credentials: true
}));

// Rate limiting
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤
});

app.use('/api/', limiter);

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°–µ—Å—Å–∏–∏
app.use(session({
    secret: process.env.SESSION_SECRET || 'dino-secret',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 1000 * 60 * 60 * 24 * 7 // 7 –¥–Ω–µ–π
    }
}));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(join(__dirname, 'public')));
app.use('/socket.io', express.static(join(__dirname, 'node_modules/socket.io/client-dist')));
app.use('/FRONTS', express.static(join(__dirname, 'FRONTS')));

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/lobby', lobbyRoutes);

// –°–∏—Å—Ç–µ–º–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date() });
});

app.get('/api/status', (req, res) => {
    res.json({ 
        status: 'ok', 
        message: 'DinosGames —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
        version: '2.0.0',
        features: [
            'Express —Å–µ—Ä–≤–µ—Ä',
            'SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 
            '–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            'Socket.IO',
            '–®—Ä–∏—Ñ—Ç—ã Benzin',
            '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞'
        ]
    });
});

// SPA fallback
app.get('*', (req, res) => {
    res.sendFile(join(__dirname, 'public', 'index.html'));
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

initDatabase()
    .then(() => {
        // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        sessionQueries.cleanup()
            .then(() => console.log('üßπ –û—á–∏—â–µ–Ω—ã –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏'))
            .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', err));

        httpServer.listen(PORT, () => {
            console.log(`üöÄ DinoGames —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}`);
            console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –≥–æ—Ç–æ–≤–∞`);
        });
    })
    .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }); 