// DiLauncher Server - Railway Compatible Version
import express from 'express';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import cookieParser from 'cookie-parser';
import crypto from 'crypto';
import dotenv from 'dotenv';
import { userQueries, initDatabase } from './server/database/database.js';
import bcrypt from 'bcrypt';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
import authRoutes from './server/routes/auth.js';
import profileRoutes from './server/routes/profile.js';
import minecraftRoutes from './server/routes/minecraft.js';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const app = express();
const PORT = process.env.PORT || 3000;

const GEMINI_API_KEY = 'AIzaSyDivBxbfDHZA7VqGmV21bCzWZ5PnLIDpBI';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

const JWT_SECRET = process.env.JWT_SECRET || 'demo-secret-key-for-development';

app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'"],
            scriptSrc: ["'self'", "'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'", "ws:", "wss:", "https://generativelanguage.googleapis.com"]
        }
    }
}));

app.use(cors({
    origin: process.env.NODE_ENV === 'production' ? 
        ['https://xoonline-production-63d1.up.railway.app'] : 
        ['http://localhost:3000', 'http://127.0.0.1:3000', 'http://0.0.0.0:3000'],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(compression());
app.use(cookieParser());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

app.use(express.static(join(__dirname, 'public')));
app.use('/FRONTS', express.static(join(__dirname, 'FRONTS')));
app.use('/uploads', express.static(join(__dirname, 'public/uploads')));

// Middleware –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    res.set({
        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
        'Surrogate-Control': 'no-store'
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if (req.path.endsWith('.html') || req.path.endsWith('.css') || req.path.endsWith('.js')) {
        res.set({
            'Last-Modified': new Date().toUTCString(),
            'ETag': Date.now().toString()
        });
    }
    
    next();
});

app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.use('/api/auth', authRoutes);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
app.use('/api/profile', profileRoutes);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã Minecraft
app.use('/api/minecraft', minecraftRoutes);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
app.get('/profile.html', (req, res) => {
    res.sendFile(join(__dirname, 'public', 'profile.html'));
});

// GML Launcher –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∞—É–Ω—á–µ—Ä–∞
// –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://gml-launcher.github.io/Gml.Docs/integrations-auth-custom.html
app.post('/api/launcher/auth', async (req, res) => {
    try {
        const { Login, Password } = req.body;
        
        console.log('üéÆ GML Launcher auth attempt for:', Login);
        
        if (!Login || !Password) {
            return res.status(400).json({
                Message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É (email –∏–ª–∏ username)
        const user = await userQueries.findByLogin(Login);
        
        if (!user) {
            console.log('‚ùå GML Auth: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', Login);
            return res.status(404).json({
                Message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        console.log('üü¢ GML Auth: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.username);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user.status === 'banned') {
            console.log('üö´ GML Auth: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', user.username);
            return res.status(403).json({
                Message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await bcrypt.compare(Password, user.password_hash);
        
        if (!isPasswordValid) {
            console.log('‚ùå GML Auth: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', user.username);
            return res.status(401).json({
                Message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
        await userQueries.updateOnlineStatus(user.id, true);

        console.log('‚úÖ GML Auth: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', user.username);

        // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ GML
        return res.status(200).json({
            Login: user.username,
            UserUuid: user.uuid,
            Message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ GML –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        return res.status(500).json({
            Message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ GML
app.get('/api/launcher/user/:uuid', async (req, res) => {
    try {
        const { uuid } = req.params;
        
        const user = await userQueries.findByUuid(uuid);
        
        if (!user) {
            return res.status(404).json({
                Message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        return res.status(200).json({
            Login: user.username,
            UserUuid: user.uuid,
            Status: user.status,
            IsOnline: user.is_online,
            LastLogin: user.last_login
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return res.status(500).json({
            Message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date(),
        version: '2.0.0',
        uptime: process.uptime()
    });
});

app.get('/api/status', (req, res) => {
        res.json({
        status: 'ok', 
        message: 'DiLauncher —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway',
        version: '2.0.0',
        features: [
            'Railway –¥–µ–ø–ª–æ–π',
            '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç',
            'API endpoints',
            '–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å',
            '–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Minecraft',
            'Email/–ø–∞—Ä–æ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            'GML Launcher —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'
        ],
        supportedVersions: [
            '1.21.6', '1.21.5', '1.21.4', '1.21.3',
            '1.20.4', '1.20.2', '1.20.1',
            '1.19.4', '1.19.2'
        ]
    });
});

app.post('/api/ai/chat', async (req, res) => {
    try {
        const { message, context } = req.body;
        
        if (!message || message.trim() === '') {
            return res.status(400).json({
                success: false,
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            });
        }

        const systemPrompt = `–¢—ã - –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è DiLauncher, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Minecraft. –ü–æ–º–æ–≥–∞–µ—à—å –∏–≥—Ä–æ–∫–∞–º —Å–æ –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –∏–≥—Ä—ã.

–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Ç–≤–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:
- –ú–æ–¥—ã –∏ –º–æ–¥–ø–∞–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π Minecraft
- Gameplay —Å–æ–≤–µ—Ç—ã –∏ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã
- –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–¥—Å—Ç–æ—É–Ω
- –§–∞—Ä–º—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- –í—ã–∂–∏–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- –°–µ—Ä–≤–µ—Ä—ã –∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –†–µ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–æ–¥–æ–≤
- OptiFine, —à–µ–π–¥–µ—Ä—ã –∏ —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∏

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–ª–æ–∞–¥–µ—Ä—ã:
- Forge (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π, –º–Ω–æ–≥–æ –º–æ–¥–æ–≤)
- Fabric (–ª–µ–≥–∫–∏–π, –±—ã—Å—Ç—Ä—ã–π)
- Quilt (—Ñ–æ—Ä–∫ Fabric)  
- NeoForge (–Ω–æ–≤—ã–π —Ñ–æ—Ä–∫ Forge)

–¢—ã –∑–Ω–∞–µ—à—å –æ–±–æ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏—è—Ö Minecraft - –æ—Ç –∞–ª—å—Ñ–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–ª–∏–∑–æ–≤. –í—Å–µ–≥–¥–∞ —É—Ç–æ—á–Ω—è–π –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.`;

        const fullPrompt = `${systemPrompt}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ Minecraft'}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}`;

        const response = await fetch(GEMINI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-goog-api-key': GEMINI_API_KEY
            },
            body: JSON.stringify({
                contents: [
                    {
                        parts: [
                            {
                                text: fullPrompt
                            }
                        ]
                    }
                ]
            })
        });

        if (!response.ok) {
            throw new Error(`Gemini API error: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates.length > 0) {
            const aiResponse = data.candidates[0].content.parts[0].text;
            
            res.json({
                success: true,
                response: aiResponse,
                timestamp: new Date().toISOString()
            });
        } else {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞:', error);
        res.status(500).json({
            success: false,
            message: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            error: error.message
        });
    }
});

// –ü—Ä–æ—Ñ–∏–ª–∏ –ª–∞—É–Ω—á–µ—Ä–∞
app.get('/api/launcher/profiles', (req, res) => {
    res.json({
        success: true,
        profiles: [
            {
                id: 1,
                name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
                minecraftVersion: '1.21.6',
                modLoader: 'vanilla',
                memoryAllocation: 4096,
                lastPlayed: new Date().toISOString(),
                playtime: 0
            },
            {
                id: 2,
                name: '–ú–æ–¥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                minecraftVersion: '1.20.4',
                modLoader: 'forge',
                memoryAllocation: 6144,
                lastPlayed: null,
                playtime: 0
            }
        ]
    });
});

app.post('/api/launcher/profiles', (req, res) => {
    const { name, minecraftVersion, modLoader, memoryAllocation } = req.body;
    
    res.json({
        success: true,
        message: '–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω',
        profile: {
            id: Math.floor(Math.random() * 1000),
            name: name || '–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
            minecraftVersion: minecraftVersion || '1.21.6',
            modLoader: modLoader || 'vanilla',
            memoryAllocation: memoryAllocation || 4096,
            createdAt: new Date().toISOString()
        }
        });
});

// –°–µ—Ä–≤–µ—Ä—ã
app.get('/api/launcher/servers', (req, res) => {
    res.json({
        success: true,
        servers: [
            {
                id: 1,
                name: 'Hypixel',
                address: 'mc.hypixel.net',
                port: 25565,
                isOnline: true,
                playerCount: 45678,
                maxPlayers: 100000,
                ping: 25
            },
            {
                id: 2,
                name: 'Mineplex',
                address: 'us.mineplex.com',
                port: 25565,
                isOnline: true,
                playerCount: 12345,
                maxPlayers: 50000,
                ping: 42
            }
        ]
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
    });
});

// 404 –¥–ª—è API
app.use('/api/*', (req, res) => {
    res.status(404).json({
        success: false,
        message: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
}); 

// SPA fallback
app.get('*', (req, res) => {
    res.sendFile(join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function startServer() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await initDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, '0.0.0.0', () => {
            console.log(`üöÄ DiLauncher —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üåê URL: http://0.0.0.0:${PORT}`);
            console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toISOString()}`);
            console.log(`üìä Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`);
            console.log(`üîß –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'production'}`);
            console.log(`üéÆ GML Launcher API: /api/launcher/auth`);
            console.log(`üîê Web Auth API: /api/auth/*`);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

startServer();

export default app; 