// –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç
import fetch from 'node-fetch';

const SERVER_URL = 'http://localhost:3000';

async function detailedDebug() {
    console.log('üîç –ü–û–î–†–û–ë–ù–ê–Ø –û–¢–õ–ê–î–ö–ê\n');

    try {
        // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
        console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
        const newUser = {
            username: 'testuser2024',
            email: 'test2024@example.com',
            password: 'testpass123'
        };

        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', newUser);

        const regResponse = await fetch(`${SERVER_URL}/api/auth/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newUser),
        });

        console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', regResponse.status);
        console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(regResponse.headers.entries()));

        const regData = await regResponse.json();
        console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', JSON.stringify(regData, null, 2));

        if (regData.success) {
            console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥...');
            
            const loginResponse = await fetch(`${SERVER_URL}/api/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    login: newUser.email,
                    password: newUser.password,
                }),
            });

            const loginData = await loginResponse.json();
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', JSON.stringify(loginData, null, 2));
        } else {
            console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
            if (regData.errors) {
                console.log('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', regData.errors);
            }
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
    }
}

detailedDebug(); 