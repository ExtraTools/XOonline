const fs = require('fs').promises;
const path = require('path');

class UserDataManager {
    constructor() {
        this.dataPath = path.join(__dirname, '../data/users.json');
        this.users = {};
        this.stats = {
            totalUsers: 0,
            gamesPlayed: 0,
            lastUpdate: null
        };
        this.loadData();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    async loadData() {
        try {
            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const dataDir = path.dirname(this.dataPath);
            await fs.mkdir(dataDir, { recursive: true });

            const data = await fs.readFile(this.dataPath, 'utf8');
            const parsedData = JSON.parse(data);
            
            this.users = parsedData.users || {};
            this.stats = parsedData.stats || {
                totalUsers: 0,
                gamesPlayed: 0,
                lastUpdate: null
            };

            console.log(`üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(this.users).length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        } catch (error) {
            if (error.code === 'ENOENT') {
                console.log('üìÑ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...');
                await this.saveData();
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            }
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    async saveData() {
        try {
            const dataToSave = {
                users: this.users,
                stats: {
                    ...this.stats,
                    lastUpdate: new Date().toISOString()
                }
            };

            await fs.writeFile(this.dataPath, JSON.stringify(dataToSave, null, 2), 'utf8');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
    async getOrCreateUser(nickname) {
        const normalizedNick = nickname.toLowerCase().trim();
        
        if (this.users[normalizedNick]) {
            console.log(`üü¢ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${nickname}`);
            return {
                ...this.users[normalizedNick],
                nickname: nickname, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                isReturning: true
            };
        } else {
            console.log(`üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${nickname}`);
            const newUser = this.createNewUser(nickname);
            this.users[normalizedNick] = newUser;
            this.stats.totalUsers++;
            await this.saveData();
            
            return {
                ...newUser,
                isReturning: false
            };
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    createNewUser(nickname) {
        return {
            nickname: nickname,
            registrationDate: new Date().toISOString(),
            lastLoginDate: new Date().toISOString(),
            
            // –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            level: 1,
            experience: 0,
            rating: 1000,
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
            gamesPlayed: 0,
            gamesWon: 0,
            gamesLost: 0,
            gamesDraw: 0,
            winStreak: 0,
            bestWinStreak: 0,
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∂–∏–º–∞–º
            localGames: 0,
            aiGames: 0,
            onlineGames: 0,
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò
            aiWins: { easy: 0, medium: 0, hard: 0, impossible: 0 },
            aiLosses: { easy: 0, medium: 0, hard: 0, impossible: 0 },
            
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements: [],
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            settings: {
                soundEnabled: true,
                musicEnabled: false,
                darkTheme: false,
                animationsEnabled: true,
                autoSave: true,
                showHints: false
            },

            // –ê–≤–∞—Ç–∞—Ä
            avatar: '/icons/gameIcons/PNG/Black/1x/button1.png',
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            totalPlayTime: 0, // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            averageGameTime: 0,
            fastestWin: 0,
            
            // IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            lastIP: null,
            isGuest: true
        };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserStats(nickname, gameResult) {
        const normalizedNick = nickname.toLowerCase().trim();
        const user = this.users[normalizedNick];
        
        if (!user) {
            console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user.gamesPlayed++;
        user.lastLoginDate = new Date().toISOString();
        this.stats.gamesPlayed++;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        if (gameResult.isWin) {
            user.gamesWon++;
            user.winStreak++;
            user.bestWinStreak = Math.max(user.bestWinStreak, user.winStreak);
            user.experience += 10;
            user.rating += this.calculateRatingChange(true, user.rating);
        } else if (gameResult.isDraw) {
            user.gamesDraw++;
            user.experience += 3;
        } else {
            user.gamesLost++;
            user.winStreak = 0;
            user.rating += this.calculateRatingChange(false, user.rating);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∂–∏–º–∞–º
        switch (gameResult.gameMode) {
            case 'local':
                user.localGames++;
                break;
            case 'ai':
                user.aiGames++;
                if (gameResult.difficulty) {
                    if (gameResult.isWin) {
                        user.aiWins[gameResult.difficulty]++;
                    } else if (!gameResult.isDraw) {
                        user.aiLosses[gameResult.difficulty]++;
                    }
                }
                break;
            case 'online':
                user.onlineGames++;
                break;
        }

        // –í—Ä–µ–º—è –∏–≥—Ä—ã
        if (gameResult.gameTime) {
            user.totalPlayTime += gameResult.gameTime;
            user.averageGameTime = Math.round(user.totalPlayTime / user.gamesPlayed);
            
            if (gameResult.isWin) {
                if (user.fastestWin === 0 || gameResult.gameTime < user.fastestWin) {
                    user.fastestWin = gameResult.gameTime;
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        user.level = Math.floor(user.experience / 100) + 1;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements(user);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ä–∞–º–∫–∞—Ö
        user.rating = Math.max(0, Math.min(3000, user.rating));

        await this.saveData();
        console.log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${nickname}: –†–µ–π—Ç–∏–Ω–≥ ${user.rating}, –£—Ä–æ–≤–µ–Ω—å ${user.level}`);
    }

    // –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    calculateRatingChange(isWin, currentRating) {
        const baseChange = 25;
        const ratingFactor = currentRating < 1000 ? 1.5 : currentRating > 2000 ? 0.7 : 1.0;
        
        if (isWin) {
            return Math.round(baseChange * ratingFactor);
        } else {
            return -Math.round(baseChange * ratingFactor * 0.8);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements(user) {
        const achievements = [];

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–≥—Ä—ã
        if (user.gamesPlayed >= 10 && !user.achievements.includes('first_steps')) {
            achievements.push('first_steps');
        }
        if (user.gamesPlayed >= 100 && !user.achievements.includes('experienced')) {
            achievements.push('experienced');
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–±–µ–∂–¥–µ–Ω–∏—è
        if (user.gamesWon >= 10 && !user.achievements.includes('winner')) {
            achievements.push('winner');
        }
        if (user.gamesWon >= 50 && !user.achievements.includes('champion')) {
            achievements.push('champion');
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
        if (user.bestWinStreak >= 5 && !user.achievements.includes('streak_master')) {
            achievements.push('streak_master');
        }
        if (user.bestWinStreak >= 10 && !user.achievements.includes('unstoppable')) {
            achievements.push('unstoppable');
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥
        if (user.rating >= 1500 && !user.achievements.includes('expert')) {
            achievements.push('expert');
        }
        if (user.rating >= 2000 && !user.achievements.includes('master')) {
            achievements.push('master');
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ò–ò
        const totalAIWins = Object.values(user.aiWins).reduce((sum, wins) => sum + wins, 0);
        if (totalAIWins >= 20 && !user.achievements.includes('ai_slayer')) {
            achievements.push('ai_slayer');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements.forEach(achievement => {
            if (!user.achievements.includes(achievement)) {
                user.achievements.push(achievement);
                console.log(`üéñÔ∏è ${user.nickname} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement}`);
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserSettings(nickname, settings) {
        const normalizedNick = nickname.toLowerCase().trim();
        const user = this.users[normalizedNick];
        
        if (user) {
            user.settings = { ...user.settings, ...settings };
            await this.saveData();
            console.log(`‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${nickname}`);
            return true;
        }
        return false;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    getLeaderboard(period = 'all-time', limit = 50, ratingFilter = 'all') {
        const users = Object.values(this.users);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        let filteredUsers = users;
        switch (ratingFilter) {
            case 'beginner':
                filteredUsers = users.filter(u => u.rating < 500);
                break;
            case 'amateur':
                filteredUsers = users.filter(u => u.rating >= 500 && u.rating < 1000);
                break;
            case 'expert':
                filteredUsers = users.filter(u => u.rating >= 1000 && u.rating < 1500);
                break;
            case 'master':
                filteredUsers = users.filter(u => u.rating >= 1500 && u.rating < 2000);
                break;
            case 'legend':
                filteredUsers = users.filter(u => u.rating >= 2000);
                break;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        const sortedUsers = filteredUsers
            .filter(user => user.gamesPlayed > 0)
            .sort((a, b) => b.rating - a.rating)
            .slice(0, limit);

        return sortedUsers.map(user => ({
            name: user.nickname,
            rating: user.rating,
            games: user.gamesPlayed,
            winRate: user.gamesPlayed > 0 ? Math.round((user.gamesWon / user.gamesPlayed) * 100) : 0,
            avatar: user.avatar
        }));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    getUserRank(nickname) {
        const normalizedNick = nickname.toLowerCase().trim();
        const user = this.users[normalizedNick];
        
        if (!user) return null;

        const allUsers = Object.values(this.users)
            .filter(u => u.gamesPlayed > 0)
            .sort((a, b) => b.rating - a.rating);

        const rank = allUsers.findIndex(u => u.nickname.toLowerCase() === normalizedNick) + 1;
        
        return {
            rank: rank || null,
            rating: user.rating,
            totalPlayers: allUsers.length
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    getServerStats() {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const todayGames = Object.values(this.users).reduce((sum, user) => {
            const lastLogin = new Date(user.lastLoginDate);
            return lastLogin >= today ? sum + user.gamesPlayed : sum;
        }, 0);

        const topRating = Math.max(...Object.values(this.users).map(u => u.rating), 0);

        return {
            totalPlayers: this.stats.totalUsers,
            gamesToday: todayGames,
            totalGames: this.stats.gamesPlayed,
            topRating: topRating
        };
    }

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async deleteUser(nickname) {
        const normalizedNick = nickname.toLowerCase().trim();
        if (this.users[normalizedNick]) {
            delete this.users[normalizedNick];
            this.stats.totalUsers--;
            await this.saveData();
            return true;
        }
        return false;
    }

    async resetUserStats(nickname) {
        const normalizedNick = nickname.toLowerCase().trim();
        const user = this.users[normalizedNick];
        
        if (user) {
            const originalNick = user.nickname;
            const originalSettings = user.settings;
            const originalDates = {
                registrationDate: user.registrationDate,
                lastIP: user.lastIP
            };
            
            this.users[normalizedNick] = {
                ...this.createNewUser(originalNick),
                settings: originalSettings,
                ...originalDates
            };
            
            await this.saveData();
            return true;
        }
        return false;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    getAllUsers() {
        return Object.values(this.users).map(user => ({
            nickname: user.nickname,
            level: user.level,
            rating: user.rating,
            gamesPlayed: user.gamesPlayed,
            winRate: user.gamesPlayed > 0 ? Math.round((user.gamesWon / user.gamesPlayed) * 100) : 0,
            lastLogin: user.lastLoginDate,
            isGuest: user.isGuest,
            lastIP: user.lastIP
        }));
    }
}

module.exports = UserDataManager; 