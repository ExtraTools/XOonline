version: '3.8'

services:
  # === DiLauncher App ===
  dilauncher:
    build:
      context: .
      target: production
    container_name: dilauncher-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dilauncher:dilauncher_password@postgres:5432/dilauncher
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - SESSION_SECRET=your-super-secret-session-key-change-in-production
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - dilauncher_data:/app/data
      - dilauncher_logs:/app/logs
    networks:
      - dilauncher-network
    healthcheck:
      test: ["CMD", "node", "-e", "import('http').then(({default:http})=>{const req=http.request('http://localhost:3000/api/health',res=>process.exit(res.statusCode===200?0:1));req.on('error',()=>process.exit(1));req.end()})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # === PostgreSQL Database ===
  postgres:
    image: postgres:15-alpine
    container_name: dilauncher-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dilauncher
      POSTGRES_USER: dilauncher
      POSTGRES_PASSWORD: dilauncher_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - dilauncher-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dilauncher -d dilauncher"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # === Redis Cache ===
  redis:
    image: redis:7-alpine
    container_name: dilauncher-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass dilauncher_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dilauncher-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # === Development version (опционально) ===
  dilauncher-dev:
    build:
      context: .
      target: development
    container_name: dilauncher-dev
    restart: "no"
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dilauncher:dilauncher_password@postgres:5432/dilauncher_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret
      - JWT_REFRESH_SECRET=dev-refresh-secret
      - SESSION_SECRET=dev-session-secret
      - CORS_ORIGIN=http://localhost:3001
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
      - /app/node_modules
      - dilauncher_dev_logs:/app/logs
    networks:
      - dilauncher-network
    profiles:
      - development

# === Volumes ===
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  dilauncher_data:
    driver: local
  dilauncher_logs:
    driver: local
  dilauncher_dev_logs:
    driver: local

# === Networks ===
networks:
  dilauncher-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16