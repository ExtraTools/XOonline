// Database Initialization Module - DinoGames 2025

import { Sequelize } from 'sequelize';
import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 3306,
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'dinogames'
};

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Sequelize
export const sequelize = new Sequelize(dbConfig.database, dbConfig.user, dbConfig.password, {
    host: dbConfig.host,
    port: dbConfig.port,
    dialect: 'mysql',
    logging: process.env.NODE_ENV === 'development' ? console.log : false,
    pool: {
        max: 5,
        min: 0,
        acquire: 30000,
        idle: 10000
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function createDatabaseIfNotExists() {
    const connection = await mysql.createConnection({
        host: dbConfig.host,
        port: dbConfig.port,
        user: dbConfig.user,
        password: dbConfig.password
    });
    
    await connection.execute(
        `CREATE DATABASE IF NOT EXISTS \`${dbConfig.database}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`
    );
    
    await connection.end();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function initDatabase() {
    try {
        // –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await createDatabaseIfNotExists();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await sequelize.authenticate();
        console.log('üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
        const { User } = await import('./models/User.js');
        const { Game } = await import('./models/Game.js');
        const { GameSession } = await import('./models/GameSession.js');
        const { PlayerStats } = await import('./models/PlayerStats.js');
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
        User.hasMany(GameSession, { as: 'sessions', foreignKey: 'userId' });
        GameSession.belongsTo(User, { as: 'user', foreignKey: 'userId' });
        
        User.hasOne(PlayerStats, { as: 'stats', foreignKey: 'userId' });
        PlayerStats.belongsTo(User, { as: 'user', foreignKey: 'userId' });
        
        Game.hasMany(GameSession, { as: 'sessions', foreignKey: 'gameId' });
        GameSession.belongsTo(Game, { as: 'game', foreignKey: 'gameId' });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await sequelize.sync({ alter: process.env.NODE_ENV === 'development' });
        console.log('üü¢ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await seedDatabase();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function seedDatabase() {
    try {
        const { Game } = await import('./models/Game.js');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–≥—Ä—ã
        const gamesCount = await Game.count();
        
        if (gamesCount === 0) {
            // –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã
            await Game.bulkCreate([
                {
                    code: 'battleship',
                    name: '–ú–æ—Ä—Å–∫–æ–π –±–æ–π',
                    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞',
                    minPlayers: 2,
                    maxPlayers: 2,
                    estimatedTime: 15,
                    isActive: true
                },
                {
                    code: 'tictactoe',
                    name: '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏',
                    description: '–ü—Ä–æ—Å—Ç–∞—è –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞',
                    minPlayers: 2,
                    maxPlayers: 2,
                    estimatedTime: 5,
                    isActive: true
                }
            ]);
            
            console.log('üü¢ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export async function closeDatabase() {
    await sequelize.close();
} 