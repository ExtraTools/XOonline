class AdminPanel {
    constructor() {
        this.users = [];
        this.filteredUsers = [];
        this.targetUser = null;
        this.init();
    }

    init() {
        this.updateTime();
        this.loadUsers();
        this.setupEventListeners();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setInterval(() => this.updateTime(), 1000);
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => this.loadUsers(), 30000);
    }

    setupEventListeners() {
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        document.getElementById('searchUser').addEventListener('input', (e) => {
            this.searchUsers(e.target.value);
        });

        // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeModal();
            }
        });

        // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.getElementById('confirmModal').addEventListener('click', (e) => {
            if (e.target.id === 'confirmModal') {
                this.closeModal();
            }
        });
    }

    updateTime() {
        const now = new Date();
        const timeString = now.toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        document.getElementById('currentTime').textContent = timeString;
    }

    async loadUsers() {
        try {
            this.showLoading(true);
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

            const response = await fetch('/api/admin/users');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.success) {
                this.users = data.users;
                this.filteredUsers = [...this.users];
                this.renderUsers();
                this.updateStats();
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.users.length);
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + error.message);
        } finally {
            this.showLoading(false);
        }
    }

    renderUsers() {
        const tbody = document.getElementById('usersTableBody');
        
        if (this.filteredUsers.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="9" style="text-align: center; padding: 2rem; color: rgba(255, 255, 255, 0.6);">
                        ${this.users.length === 0 ? '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = this.filteredUsers.map(user => {
            const onlineClass = user.is_online ? 'online' : 'offline';
            const statusClass = user.status === 'active' ? 'active' : 'banned';
            const lastLogin = user.last_login ? 
                new Date(user.last_login).toLocaleString('ru-RU') : 
                '–ù–∏–∫–æ–≥–¥–∞';

            return `
                <tr>
                    <td class="user-id">${user.id}</td>
                    <td class="user-uuid" title="${user.uuid}">${user.uuid.substring(0, 8)}...</td>
                    <td><strong>${user.username}</strong></td>
                    <td class="user-email">${user.email}</td>
                    <td class="password-hash" title="${user.password_hash}">
                        ${user.password_hash.substring(0, 20)}...
                    </td>
                    <td><span class="user-status ${statusClass}">${user.status}</span></td>
                    <td>
                        <span class="online-indicator ${onlineClass}"></span>
                        ${user.is_online ? '–í —Å–µ—Ç–∏' : '–ù–µ –≤ —Å–µ—Ç–∏'}
                    </td>
                    <td>${lastLogin}</td>
                    <td>
                        <button class="btn btn-danger" onclick="adminPanel.prepareScreamer('${user.email}')">
                            üëª –°–∫—Ä–∏–º–µ—Ä
                        </button>
                    </td>
                </tr>
            `;
        }).join('');
    }

    searchUsers(query) {
        if (!query.trim()) {
            this.filteredUsers = [...this.users];
        } else {
            const searchTerm = query.toLowerCase();
            this.filteredUsers = this.users.filter(user => 
                user.username.toLowerCase().includes(searchTerm) ||
                user.email.toLowerCase().includes(searchTerm) ||
                user.id.toString().includes(searchTerm)
            );
        }
        this.renderUsers();
    }

    updateStats() {
        const totalUsers = this.users.length;
        const onlineUsers = this.users.filter(user => user.is_online).length;
        const bannedUsers = this.users.filter(user => user.status === 'banned').length;
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const todayRegistrations = this.users.filter(user => {
            const createdDate = new Date(user.created_at);
            return createdDate >= today;
        }).length;

        document.getElementById('totalUsers').textContent = totalUsers;
        document.getElementById('onlineUsers').textContent = onlineUsers;
        document.getElementById('bannedUsers').textContent = bannedUsers;
        document.getElementById('todayRegistrations').textContent = todayRegistrations;
    }

    prepareScreamer(userEmail) {
        this.targetUser = userEmail;
        document.getElementById('confirmTargetUser').textContent = userEmail;
        document.getElementById('confirmModal').style.display = 'block';
    }

    async confirmScreamer() {
        if (!this.targetUser) return;

        try {
            console.log('üëª –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', this.targetUser);

            const response = await fetch('/api/admin/screamer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    target: this.targetUser
                })
            });

            const data = await response.json();

            if (data.success) {
                this.showSuccess(`–°–∫—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${this.targetUser}! üëª`);
                console.log('‚úÖ –°–∫—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–º–µ—Ä–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–º–µ—Ä–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–º–µ—Ä–∞: ' + error.message);
        } finally {
            this.closeModal();
        }
    }

    closeModal() {
        document.getElementById('confirmModal').style.display = 'none';
        this.targetUser = null;
    }

    showLoading(show) {
        const spinner = document.getElementById('loadingSpinner');
        spinner.style.display = show ? 'block' : 'none';
    }

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">
                    ${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}
                </span>
                <span class="notification-text">${message}</span>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if (!document.getElementById('notificationStyles')) {
            const style = document.createElement('style');
            style.id = 'notificationStyles';
            style.textContent = `
                .notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 1001;
                    padding: 1rem 1.5rem;
                    border-radius: 8px;
                    color: white;
                    font-weight: 600;
                    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
                    opacity: 0;
                    transform: translateX(100%);
                    transition: all 0.3s ease;
                }
                
                .notification.show {
                    opacity: 1;
                    transform: translateX(0);
                }
                
                .notification-success {
                    background: linear-gradient(45deg, #00ff88, #00cc6a);
                }
                
                .notification-error {
                    background: linear-gradient(45deg, #ff6b6b, #ee5a24);
                }
                
                .notification-info {
                    background: linear-gradient(45deg, #667eea, #764ba2);
                }
                
                .notification-content {
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => notification.classList.add('show'), 100);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 5000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.loadUsers = () => adminPanel.loadUsers();
window.searchUsers = () => {
    const query = document.getElementById('searchUser').value;
    adminPanel.searchUsers(query);
};

window.sendScreamer = () => {
    const target = document.getElementById('targetUser').value.trim();
    if (!target) {
        adminPanel.showError('–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }
    adminPanel.prepareScreamer(target);
};

window.confirmScreamer = () => adminPanel.confirmScreamer();
window.closeModal = () => adminPanel.closeModal();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤
window.resetOnlineStatuses = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—ã? –≠—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ç—É—Å "–ù–µ –≤ —Å–µ—Ç–∏".')) {
        return;
    }

    try {
        console.log('üõ°Ô∏è –°–±—Ä–æ—Å –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤...');
        
        const response = await fetch('/api/admin/reset-online', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            console.log('‚úÖ –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã');
            adminPanel.showNotification('‚úÖ –í—Å–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await adminPanel.loadUsers();
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞:', data.message);
            adminPanel.showNotification('‚ùå –û—à–∏–±–∫–∞: ' + data.message, 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
        adminPanel.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–æ–≤', 'error');
    }
};

// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const ADMIN_PASSWORD = '260606';
const SESSION_KEY = 'admin_session';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuthStatus() {
    const isAuthenticated = sessionStorage.getItem(SESSION_KEY) === 'true';
    if (isAuthenticated) {
        showAdminPanel();
    } else {
        showAuthForm();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthForm() {
    document.getElementById('authOverlay').style.display = 'flex';
    document.getElementById('adminContainer').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
function showAdminPanel() {
    document.getElementById('authOverlay').style.display = 'none';
    document.getElementById('adminContainer').style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!window.adminPanel) {
        window.adminPanel = new AdminPanel();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
function checkPassword(event) {
    event.preventDefault();
    const password = document.getElementById('adminPassword').value;
    const errorDiv = document.getElementById('authError');
    
    if (password === ADMIN_PASSWORD) {
        sessionStorage.setItem(SESSION_KEY, 'true');
        showAdminPanel();
        errorDiv.style.display = 'none';
    } else {
        errorDiv.style.display = 'block';
        document.getElementById('adminPassword').value = '';
        document.getElementById('adminPassword').focus();
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
function logout() {
    sessionStorage.removeItem(SESSION_KEY);
    showAuthForm();
    document.getElementById('adminPassword').value = '';
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
window.checkPassword = checkPassword;
window.logout = logout;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    checkAuthStatus();
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
window.addEventListener('beforeunload', (e) => {
    e.preventDefault();
    e.returnValue = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å?';
    return '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å?';
}); 