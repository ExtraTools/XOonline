import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const connectDB = async () => {
    try {
        const conn = await mongoose.connect(process.env.DATABASE_URL || 'mongodb://localhost:27017/dilauncher', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
        });

        console.log(`üöÄ MongoDB Connected: ${conn.connection.host}`);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        mongoose.connection.on('connected', () => {
            console.log('‚úÖ Mongoose connected to MongoDB');
        });

        mongoose.connection.on('error', (err) => {
            console.error('‚ùå Mongoose connection error:', err);
        });

        mongoose.connection.on('disconnected', () => {
            console.log('‚ö†Ô∏è Mongoose disconnected');
        });

        // Graceful shutdown
        process.on('SIGINT', async () => {
            await mongoose.connection.close();
            console.log('üõë Mongoose connection closed through app termination');
            process.exit(0);
        });

    } catch (error) {
        console.error('‚ùå Error connecting to MongoDB:', error.message);
        // –í production —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (process.env.NODE_ENV === 'production') {
            console.log('üì¶ Switching to in-memory database for production');
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ë–î
        }
        process.exit(1);
    }
};

export default connectDB;